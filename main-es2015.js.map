{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/algorithms/maze/randomMaze.ts","./src/app/algorithms/pathfinding/astar.ts","./src/app/algorithms/pathfinding/dijkstra.ts","./src/app/algorithms/pathfinding/dijkstraexperimental.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/grid/grid.component.ts","./src/app/grid/grid.component.html","./src/app/navbar/navbar.component.ts","./src/app/navbar/navbar.component.html","./src/environments/environment.ts","./src/main.ts","./src/models/node.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACVA;AAAA;AAAO,SAAS,kBAAkB,CAAC,IAAc;IAE7C,MAAM,SAAS,GAAG,EAAE,CAAC;IAErB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QAChC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,yCAAyC;YACzC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAG,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK;gBACxD,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACnC;KACJ;IACD,OAAO,SAAS,CAAC;AACrB,CAAC;;;;;;;;;;;;;ACdD;AAAA;AAAA;AAAO,SAAS,KAAK,CAAC,IAAc,EAAE,SAAe,EAAE,OAAa,EAAE,SAAiB;IACnF,YAAY;IACZ,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QAChC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;SAChC;KACJ;IACD,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzB,OAAM,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAC;QACvB,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACpC,IAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,EAAC;gBAC1C,cAAc,GAAG,CAAC,CAAC;aACtB;SACJ;QACD,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE7C,wBAAwB;QACxB,IAAG,WAAW,CAAC,KAAK,EAAC;YACjB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YAC/B,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7B,OAAO,UAAU,CAAC;SACrB;QAED,wDAAwD;QACxD,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QACnC,kCAAkC;QAClC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC;QAC1B,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7B,0CAA0C;QAC1C,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAElD,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACrC,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC9B,6EAA6E;YAC7E,IAAG,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAC;gBAChD,OAAO,CAAC,GAAG,CAAC,YAAY,QAAQ,CAAC,EAAE,6BAA6B,CAAC,CAAC;gBAClE,SAAS;aACZ;YAED,2EAA2E;YAC3E,IAAI,MAAM,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC;YAC/B,sGAAsG;YACtG,IAAI,OAAO,GAAG,KAAK,CAAC;YAEpB,+BAA+B;YAC/B,IAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,4BAA4B,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC3E,6FAA6F;gBAC7F,OAAO,GAAG,IAAI,CAAC;gBACf,8BAA8B;gBAC9B,QAAQ,CAAC,CAAC,GAAG,oBAAoB,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;gBAChE,2CAA2C;gBAC3C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC3B;YAED,8FAA8F;iBACzF,IAAG,MAAM,GAAG,QAAQ,CAAC,CAAC,EAAC;gBACxB,OAAO,GAAG,IAAI,CAAC;aAClB;YAED,kDAAkD;YAClD,IAAG,OAAO,EAAC;gBACP,OAAO,CAAC,GAAG,CAAC,qBAAqB,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;gBACpE,QAAQ,CAAC,UAAU,GAAG,WAAW,CAAC;gBAClC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC;gBACpB,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;gBACrC,OAAO,CAAC,GAAG,CAAC,MAAM,QAAQ,CAAC,CAAC,OAAO,QAAQ,CAAC,CAAC,OAAO,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;aACrE;SACJ;KACJ;IACD,2CAA2C;IAC3C,OAAO,EAAE,CAAC;AACd,CAAC;AAED,SAAS,YAAY,CAAC,IAAc,EAAE,WAAiB;IACnD,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,+CAA+C;IAC/C,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,WAAW,CAAC,GAAG,GAAG,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAChF,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAClC,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;IAC5B,qBAAqB;IACrB,IAAG,GAAG,GAAG,CAAC,EAAC;QACP,IAAI,KAAK,GACT,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,qBAAqB;IACrB,IAAG,GAAG,GAAG,EAAE,EAAC;QACR,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,2BAA2B;IAC3B,IAAG,MAAM,GAAG,CAAC,EAAC;QACV,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,4BAA4B;IAC5B,IAAG,MAAM,GAAG,EAAE,EAAC;QACX,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IAED,qDAAqD;IACrD,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,SAAS,oBAAoB,CAAC,WAAiB,EAAE,OAAa,EAAE,SAAiB;IAC7E,IAAG,SAAS,IAAI,WAAW,EAAC;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5H,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,cAAc,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAC9I,OAAO,MAAM,CAAC;KACjB;SACG;QACA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QACvG,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,cAAc,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAC9I,OAAO,MAAM,CAAC;KACjB;AACL,CAAC;AAEM,SAAS,mBAAmB,CAAC,OAAa;IAC7C,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,uCAAuC;IACvC,IAAI,WAAW,GAAG,OAAO,CAAC;IAC1B,+DAA+D;IAC/D,OAAM,WAAW,CAAC,UAAU,IAAI,IAAI,EAAC;QACjC,mEAAmE;QACnE,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClC,6EAA6E;QAE7E,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC;KACxC;IACD,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC;AACxB,CAAC;;;;;;;;;;;;;AC7IG;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,eAAe,CAAC,IAAc,EAAE,SAAe,EAAE,OAAa;IAC1E,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,cAAc;IACd,KAAI,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAC;gBAClB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;aAC3B;iBACG;gBACA,kEAAkE;gBAClE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;aAClC;YACD,6CAA6C;YAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;SAChC;KACJ;IACD,0CAA0C;IAC1C,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;IAChE,kEAAkE;IAClE,OAAM,cAAc,CAAC,MAAM,IAAI,CAAC,EAAC;QAC7B,4EAA4E;QAC5E,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QACvD,iDAAiD;QACjD,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC;QAC3C,iBAAiB;QACjB,IAAG,WAAW,CAAC,MAAM,EAAC;YAClB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1B,SAAS;SACZ;QACD,4DAA4D;QAC5D,IAAG,WAAW,CAAC,QAAQ,IAAI,QAAQ,EAAC;YAChC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,OAAO,YAAY,CAAC;SACvB;QACD,sDAAsD;QACtD,IAAG,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAC;YAC1C,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;SAChC;QACD,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,+DAA+D;QAC/D,IAAG,WAAW,CAAC,KAAK,EAAC;YACjB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClC,OAAO,YAAY,CAAC;SACvB;QACD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;QACjC,iCAAiC;QACjC,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KAC/C;AACL,CAAC;AAEM,SAAS,qBAAqB,CAAC,IAAc,EAAE,WAAiB;IACnE,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,+CAA+C;IAC/C,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,WAAW,CAAC,GAAG,GAAG,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IACtF,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAClC,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;IAC5B,qBAAqB;IACrB,IAAG,GAAG,GAAG,CAAC,EAAC;QACP,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,qBAAqB;IACrB,IAAG,GAAG,GAAG,EAAE,EAAC;QACR,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,2BAA2B;IAC3B,IAAG,MAAM,GAAG,CAAC,EAAC;QACV,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,4BAA4B;IAC5B,IAAG,MAAM,GAAG,EAAE,EAAC;QACX,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,qDAAqD;IACrD,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7D,CAAC;AAED,qBAAqB;AACrB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDG;AAEH,SAAS,wBAAwB,CAAC,IAAc,EAAE,WAAiB;IAC/D,kDAAkD;IAClD,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACpE,kFAAkF;IAClF,yEAAyE;IACzE,qEAAqE;IACrE,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAG,IAAI,CAAC,UAAU,EAAC;YACf,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,GAAG,GAAG,CAAC;SAC9C;aACG;YACA,uEAAuE;YACvE,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC;SAC5C;QACD,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;IAClC,CAAC,CAAC,CAAC;AACP,CAAC;AAEM,SAAS,MAAM,CAAC,IAAc;IACjC,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,mCAAmC;IACnC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QAChC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1B;KACJ;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAEM,SAAS,kBAAkB,CAAC,OAAa;IAC5C,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,uCAAuC;IACvC,IAAI,WAAW,GAAG,OAAO,CAAC;IAC1B,+DAA+D;IAC/D,OAAM,WAAW,IAAI,IAAI,EAAC;QACtB,mEAAmE;QACnE,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClC,6EAA6E;QAC7E,IAAG,WAAW,CAAC,UAAU,CAAC,OAAO,EAAC;YAAC,MAAM;SAAC;QAC1C,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC;KACxC;IACD,OAAO,YAAY,CAAC;AACxB,CAAC;;;;;;;;;;;;;ACxLD;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,mBAAmB,CAAC,IAAc,EAAE,SAAe,EAAE,OAAa,EAAE,SAAiB;IACjG,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,cAAc;IACd,KAAI,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,IAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAC;gBAClB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;aACvE;iBACG;gBACA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC/B,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;aACvE;YACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,IAAI,CAAC;SAChC;KACJ;IACD,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC9B,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;IAChE,OAAM,cAAc,CAAC,MAAM,IAAI,CAAC,EAAC;QAC7B,4EAA4E;QAC5E,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QACvD,iDAAiD;QACjD,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,EAAE,CAAC;QAC3C,iBAAiB;QACjB,IAAG,WAAW,CAAC,MAAM,EAAC;YAClB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1B,SAAS;SACZ;QACD,4DAA4D;QAC5D,IAAG,WAAW,CAAC,QAAQ,IAAI,QAAQ,EAAC;YAChC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,OAAO,YAAY,CAAC;SACvB;QACD,sDAAsD;QACtD,IAAG,CAAC,WAAW,CAAC,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAC;YAC1C,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;SAChC;QACD,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/B,+DAA+D;QAC/D,IAAG,WAAW,CAAC,KAAK,EAAC;YACjB,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClC,OAAO,YAAY,CAAC;SACvB;QACD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC;QACjC,wBAAwB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;KAC/C;AACL,CAAC;AAEM,SAAS,MAAM,CAAC,IAAc;IACjC,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,mCAAmC;IACnC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;QAChC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACnC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1B;KACJ;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAS,oBAAoB,CAAC,WAAiB,EAAE,OAAa,EAAE,SAAiB;IAC7E,IAAG,SAAS,IAAI,WAAW,EAAC;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5H,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,cAAc,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAC9I,OAAO,MAAM,CAAC;KACjB;SACG;QACA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QACvG,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,OAAO,CAAC,GAAG,CAAC,gBAAgB,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,MAAM,cAAc,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,wBAAwB,MAAM,EAAE,CAAC,CAAC;QAC9I,OAAO,MAAM,CAAC;KACjB;AACL,CAAC;AAED,SAAS,wBAAwB,CAAC,IAAc,EAAE,WAAiB;IAC/D,kDAAkD;IAClD,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACpE,kFAAkF;IAClF,yEAAyE;IACzE,qEAAqE;IACrE,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC9B,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QAClD,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC;IAClC,CAAC,CAAC,CAAC;AACP,CAAC;AAEM,SAAS,qBAAqB,CAAC,IAAc,EAAE,WAAiB;IACnE,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,+CAA+C;IAC/C,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,WAAW,CAAC,GAAG,GAAG,GAAG,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;IAChF,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;IAClC,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC;IAC5B,qBAAqB;IACrB,IAAG,GAAG,GAAG,CAAC,EAAC;QACP,IAAI,KAAK,GACT,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,qBAAqB;IACrB,IAAG,GAAG,GAAG,EAAE,EAAC;QACR,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,2BAA2B;IAC3B,IAAG,MAAM,GAAG,CAAC,EAAC;QACV,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,4BAA4B;IAC5B,IAAG,MAAM,GAAG,EAAE,EAAC;QACX,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,GAAG,SAAS,CAAC,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;KAC9J;IACD,qDAAqD;IACrD,OAAO,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7D,CAAC;AAEM,SAAS,kBAAkB,CAAC,OAAa;IAC5C,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,uCAAuC;IACvC,IAAI,WAAW,GAAG,OAAO,CAAC;IAC1B,+DAA+D;IAC/D,OAAM,WAAW,IAAI,IAAI,EAAC;QACtB,mEAAmE;QACnE,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClC,6EAA6E;QAC7E,IAAG,WAAW,CAAC,UAAU,CAAC,OAAO,EAAC;YAAC,MAAM;SAAC;QAC1C,WAAW,GAAG,WAAW,CAAC,UAAU,CAAC;KACxC;IACD,OAAO,CAAC,GAAG,CAAC,qBAAqB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IACzD,OAAO,YAAY,CAAC;AACxB,CAAC;;;;;;;;;;;;;ACtIL;AAAA;AAAA;AAAA;AAAyC;AACc;;;AAGvD,MAAM,MAAM,GAAW,EAAE,CAAC;AAMnB,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACTD;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;;AAQnC,MAAM,YAAY;IAEvB,YAAoB,YAAmB;QAAnB,iBAAY,GAAZ,YAAY,CAAO;QADvC,UAAK,GAAG,YAAY,CAAC;QAEnB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;;wEAJU,YAAY;4FAAZ,YAAY;QCRzB,yEACE;QAAA,uEACE;QAAA,uEACE;QAAA,sEAAqB;QACvB,4DAAO;QACT,4DAAO;QACT,4DAAM;QAEN,2EAA+B;;6FDAlB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACoB;AACkB;AAEvB;AACT;AACa;AACN;;AAiB/C,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YANJ;YACP,uEAAa;YACb,oEAAgB;YAChB,0EAAgB;YAChB,4FAAuB;SACxB;mIAIU,SAAS,mBAblB,2DAAY;QACZ,wEAAe;QACf,kEAAa,aAGb,uEAAa;QACb,oEAAgB;QAChB,0EAAgB;QAChB,4FAAuB;6FAKd,SAAS;cAfrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,wEAAe;oBACf,kEAAa;iBACd;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,0EAAgB;oBAChB,4FAAuB;iBACxB;gBACD,SAAS,EAAE,EAAE;gBACb,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;ACxBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAEX;AACgD;AACV;AACQ;AAClB;;;;;;ICiGvD,yEAMI;IAJJ,ubAAiC;IAI7B,qEAQM;IACV,4DAAK;;;IATI,0DAOC;IAPD,6OAOC;;;IAdd,qEACI;IAAA,+GAMI;IAUR,4DAAK;;;IAhBG,0DAAwC;IAAxC,4EAAwC;;AD9FxD,MAAM,UAAU,GAAG,EAAE,CAAC;AACtB,IAAI,SAAS,GAAG,SAAS,CAAC;AAC1B,IAAI,QAAQ,GAAG,WAAW,CAAC;AAC3B,IAAI,WAAW,GAAG,IAAI,CAAC;AACvB,IAAI,cAAc,GAAG,EAAE,CAAC;AACxB,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,IAAI,aAAa,GAAG,KAAK,CAAC;AAC1B,IAAI,WAAW,GAAG,KAAK,CAAC;AACxB,IAAI,SAAS,GAAG,KAAK,CAAC;AACtB,IAAI,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;AACjC,IAAI,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;AAQxB,MAAM,aAAa;IAIxB;QAFA,iBAAY,GAAG,EAAE,CAAC;QAIlB,UAAK,GAAG,UAAU,CAAC;QACnB,cAAS,GAAG,SAAS,CAAC;IAHP,CAAC;IAKhB,QAAQ;QACN,kCAAkC;QAClC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,8DAA8D;QAC9D,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAChC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAChC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC9B,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC9B,iCAAiC;QACjC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,0BAA0B;QACxB,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,KAAI,IAAI,GAAG,GAAW,CAAC,EAAE,GAAG,IAAI,EAAE,EAAE,GAAG,EAAE,EAAC;YACxC,MAAM,UAAU,GAAG,EAAE,CAAC;YACtB,KAAI,IAAI,MAAM,GAAW,CAAC,EAAE,MAAM,GAAG,EAAE,EAAE,MAAM,EAAE,EAAC;gBAChD,IAAG,GAAG,IAAI,EAAE,IAAI,MAAM,IAAI,EAAE,EAAC;oBAC3B,UAAU,CAAC,IAAI,CAAC,IAAI,iDAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;iBAC1E;qBACI,IAAG,GAAG,IAAI,EAAE,IAAI,MAAM,IAAI,EAAE,EAAC;oBAChC,UAAU,CAAC,IAAI,CAAC,IAAI,iDAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;iBAC1E;qBACG;oBACF,UAAU,CAAC,IAAI,CAAC,IAAI,iDAAI,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAG,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;iBAC5E;gBACD,KAAK,EAAE,CAAC;aACT;YACD,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC7B;IACH,CAAC;IAED,cAAc;QACZ,IAAG,SAAS;YAAE,OAAO;QACrB,IAAG,IAAI,CAAC,SAAS,IAAI,SAAS,EAAC;YAC7B,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,oBAAoB;SAC5E;aACG;YACF,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,gBAAgB,CAAC;YACxE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;YAC3E,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,SAAS,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,kBAAkB,EAAE,CAAC;SAC3B;IACH,CAAC;IAED,kBAAkB;QAChB,IAAG,IAAI,CAAC,SAAS,IAAI,UAAU,EAAC;YAC9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,wFAAe,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;YACrE,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAC;gBAClC,UAAU,CAAC,GAAG,EAAE;oBACd,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,YAAY,CAAC;oBACpE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;gBAC7E,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,gBAAgB,CAAC;gBACxE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,SAAS,GAAG,KAAK,CAAC;gBAClB,OAAO;aACR;iBACG;gBACF,MAAM,YAAY,GAAG,2FAAkB,CAAC,OAAO,CAAC,CAAC;gBACjD,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;gBAC/D,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;aAC7D;SACF;aACI,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EAAC;YAC7B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,2EAAK,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACrE,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;YACpD,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAC;gBAClC,UAAU,CAAC,GAAG,EAAE;oBACd,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,YAAY,CAAC;oBACpE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;gBAC7E,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,gBAAgB,CAAC;gBACxE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,SAAS,GAAG,KAAK,CAAC;gBAClB,OAAO;aACR;iBACG;gBACF,MAAM,YAAY,GAAG,yFAAmB,CAAC,OAAO,CAAC,CAAC;gBAClD,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;gBAC/D,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;aAC7D;SACF;aACI,IAAG,IAAI,CAAC,SAAS,IAAI,cAAc,EAAC;YACvC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YACjD,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACzC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,wGAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;YACnF,IAAG,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAC;gBAClC,UAAU,CAAC,GAAG,EAAE;oBACd,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,YAAY,CAAC;oBACpE,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;gBAC7E,CAAC,EAAE,IAAI,CAAC,CAAC;gBACT,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,gBAAgB,CAAC;gBACxE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,SAAS,GAAG,KAAK,CAAC;gBAClB,OAAO;aACR;iBACI;gBACH,MAAM,YAAY,GAAG,2FAAkB,CAAC,OAAO,CAAC,CAAC;gBACjD,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;gBAC/D,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;aAC7D;SACF;IACH,CAAC;IAED,gBAAgB,CAAC,YAAoB,EAAE,YAAoB,EAAE,WAAoB;QAC/E,IAAG,WAAW,EAAC;YACb,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,CAAC,IAAI,YAAY,CAAC,MAAM,EAAC;oBAC1B,UAAU,CAAC,GAAG,EAAE;wBACd,OAAO,CAAC,GAAG,CAAC,wBAAwB,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;wBAC5D,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;wBAC7E,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;oBACzC,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,CAAC;oBACvB,OAAO;iBACR;gBACD,UAAU,CAAC,GAAG,EAAE;oBACd,IAAG,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAC,GAAE;yBAClD;wBACF,YAAY,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC;qBAC1C;gBACH,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,CAAC;aACxB;SACF;aACG;YACF,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;SACxC;IACH,CAAC;IAED,mBAAmB,CAAC,YAAoB;QACtC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YAC3C,UAAU,CAAC,GAAG,EAAE;gBACd,IAAG,CAAC,IAAI,YAAY,CAAC,MAAM,EAAC;oBAC1B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;oBAC3B,SAAS,GAAG,KAAK,CAAC;oBAClB,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;oBAC3E,UAAU,CAAC,GAAG,EAAE;wBACd,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,YAAY;oBACrE,CAAC,EAAE,IAAI,CAAC,CAAC;oBACT,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,OAAO;oBAC9D,OAAO;iBACR;gBACD,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAC9F,YAAY,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC1C,IAAG,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,EAAC,GAAE;qBACtB;oBAAC,YAAY,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,IAAI,CAAC;iBAAC;YAC/C,CAAC,EAAE,CAAC,GAAG,cAAc,GAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,sBAAsB;QACpB,IAAG,SAAS;YAAE,OAAO;QACrB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,SAAS,GAAG,IAAI,CAAC;QACjB,MAAM,KAAK,GAAG,sFAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED,oBAAoB,CAAC,KAAa;QAChC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACpC,UAAU,CAAC,GAAG,EAAE;gBAChB,IAAG,CAAC,IAAI,KAAK,CAAC,MAAM,EAAC;oBACnB,SAAS,GAAG,KAAK,CAAC;oBAClB,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;oBAC3E,UAAU,CAAC,GAAG,EAAE;wBACd,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,YAAY;oBACrE,CAAC,EAAE,IAAI,CAAC,CAAC;oBACT,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,OAAO;oBAC9D,OAAO;iBACR;gBACC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;YACzB,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;SACZ;IACH,CAAC;IAED,UAAU,CAAC,GAAW,EAAE,MAAc;QACpC,IAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAC;YACpE,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnC,OAAO;SACR;aACI,IAAG,SAAS,EAAC,GAAE;aAChB;YACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;SACpE;QACD,OAAO,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,GAAG,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC;IACpG,CAAC;IAED,QAAQ,CAAC,GAAW,EAAE,MAAc;QAClC,IAAG,SAAS,EAAC;YAAC,OAAO;SAAC;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;QACvC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACjC,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,WAAW,CAAC,GAAW,EAAE,MAAc;QACrC,IAAG,SAAS,EAAC;YAAC,OAAO;SAAC;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,KAAK,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,GAAW,EAAE,MAAc;QAChC,IAAG,SAAS,EAAC;YAAC,OAAO;SAAC;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC;QACrC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC/B,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACpC,CAAC;IAED,SAAS,CAAC,GAAW,EAAE,MAAc;QACnC,IAAG,SAAS,EAAC;YAAC,OAAO;SAAC;QACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;IACxC,CAAC;IAED,SAAS,CAAC,GAAW,EAAE,GAAW;QAChC,cAAc,GAAG,IAAI,CAAC;QACtB,IAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAC;YAC9B,aAAa,GAAG,IAAI,CAAC;SACtB;aACI,IAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAC;YACjC,WAAW,GAAG,IAAI,CAAC;SACpB;aACI;YACH,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC3B;QACD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC5B,CAAC;IAED,UAAU,CAAC,GAAW,EAAE,MAAc;QACpC,IAAG,cAAc,IAAI,CAAC,aAAa,IAAI,CAAC,WAAW,EAAC;YAClD,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC9B;aACI,IAAG,cAAc,IAAI,aAAa,EAAC;YACtC,IAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC5B;aACI,IAAG,cAAc,IAAI,WAAW,EAAC;YACpC,IAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,EAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC1B;aACG,GAAE;IACR,CAAC;IAED,UAAU,CAAC,GAAW,EAAE,MAAc;QACpC,IAAG,cAAc,IAAI,aAAa,EAAC;YACjC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC/B;aACI,IAAG,cAAc,IAAI,WAAW,EAAC;YACpC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;SAC7B;aACI,GAAE;IACT,CAAC;IAED,OAAO,CAAC,GAAY,EAAE,MAAe;QACnC,cAAc,GAAG,KAAK,CAAC;QACvB,aAAa,GAAG,KAAK,CAAC;QACtB,WAAW,GAAG,KAAK,CAAC;QACpB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU;QACR,IAAG,SAAS;YACV,OAAO;QACT,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;oBAC1B,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;aACjC;SACF;IACH,CAAC;IAED,UAAU;QACR,IAAG,SAAS;YACV,OAAO;QACT,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;gBAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;gBACnC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC3C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC;aACzC;SACF;QACD,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,eAAe;QACb,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAC9D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;QAC9D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC;QAC1D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC;IAC5D,CAAC;IAED,iBAAiB;QACf,IAAG,SAAS;YACV,OAAO;QACT,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAC;oBAC7F,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,KAAK,CAAC;oBACnC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,GAAG,KAAK,CAAC;oBAC3C,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,GAAG,KAAK,CAAC;oBACxC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;iBACjC;aACF;SACF;QACD,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IAED,uBAAuB,CAAC,SAAiB;QACvC,4BAA4B;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC,WAAW,GAAG,aAAa,IAAI,CAAC,SAAS,GAAG,CAAC;QACtF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC9B,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,QAAO,KAAK,EAAC;YACX,KAAK,WAAW;gBACd,cAAc,GAAG,CAAC,CAAC;gBACnB,MAAM;YACR,KAAK,MAAM;gBACT,cAAc,GAAG,EAAE,CAAC;YACtB,KAAK,QAAQ;gBACX,cAAc,GAAG,EAAE,CAAC;gBACpB,MAAM;YACR,KAAK,MAAM;gBACT,cAAc,GAAG,EAAE,CAAC;gBACpB,MAAM;YACR,KAAK,WAAW;gBACd,cAAc,GAAG,EAAE,CAAC;SACvB;IACH,CAAC;IAED,uBAAuB;QACrB,MAAM,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAqB,CAAC;QACvF,WAAW,GAAG,IAAI,CAAC;QACnB,mBAAmB,CAAC,OAAO,GAAG,IAAI,CAAC;IAErC,CAAC;IAED,sBAAsB;QACpB,MAAM,mBAAmB,GAAG,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAqB,CAAC;QAEvF,IAAG,mBAAmB,CAAC,OAAO,EAAC;YAC7B,WAAW,GAAG,IAAI,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAC1B;aACI;YACH,WAAW,GAAG,KAAK,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,aAAa,CAAC,YAAoB,EAAE,YAAoB,EAAE,WAAoB;QAC5E,IAAG,WAAW,EAAC;YACb,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,CAAC,IAAI,YAAY,CAAC,MAAM,EAAC;oBAC1B,UAAU,CAAC,GAAG,EAAE;wBACd,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;4BAC1C,UAAU,CAAC,GAAG,EAAE;gCACd,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC;gCAChE,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC;gCAC/D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC;4BAC/D,CAAC,EAAE,CAAC,GAAG,cAAc,GAAC,CAAC,CAAC,CAAC;yBAC1B;oBACH,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,CAAC;iBACxB;qBACG;oBACF,UAAU,CAAC,GAAG,EAAE;wBACd,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC;wBAChE,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC;oBAC/D,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,CAAC;iBACxB;aACF;SACF;aACG;YACF,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC1C,UAAU,CAAC,GAAG,EAAE;oBACd,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC;oBAC/D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC;gBAC/D,CAAC,EAAE,CAAC,GAAG,cAAc,GAAC,CAAC,CAAC,CAAC;aAC1B;SACF;IACH,CAAC;IAED,sBAAsB;QACpB,IAAI,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;QACjF,IAAI,iBAAiB,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;QAEjF,IAAG,QAAQ,IAAI,WAAW,EAAC;YACzB,iBAAiB,CAAC,OAAO,GAAG,IAAI,CAAC;YACjC,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC;SACnC;aACG;YACF,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC;YAClC,iBAAiB,CAAC,OAAO,GAAG,IAAI,CAAC;SAClC;IACH,CAAC;IAED,oBAAoB,CAAC,SAAiB;QACpC,QAAQ,GAAG,SAAS,CAAC;QACrB,IAAI,CAAC,sBAAsB,EAAE,CAAC;IAChC,CAAC;IAED,YAAY;QACV,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc;oBACxE,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,WAAW;QACT,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;YACxC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;gBAC3C,IAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM;oBACxB,OAAO,IAAI,CAAC;aACf;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,qDAAqD;IACrD,YAAY,CAAC,YAAoB;QAC/B,IAAG,YAAY,CAAC,MAAM,IAAI,CAAC,EAAC;YAC1B,OAAO,KAAK,CAAC;SACd;aACI,IAAG,YAAY,CAAC,YAAY,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,KAAK,EAAC;YAChD,OAAO,IAAI,CAAC;SACb;aACG;YACF,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,eAAe;QACb,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAC;QAEhD,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAC/C,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC;;0EA1dU,aAAa;6FAAb,aAAa;QC3B1B,yEACI;QAAA,sEACI;QAAA,uEAA0B;QAAA,0EAAwB;QAAA,qEAAU;QAAA,4DAAO;QAAA,4DAAI;QACvE,wEACI;QAAA,wEACI;QAAA,yEACI;QAAA,4EAAwB;QAAA,qEAAU;QAAA,4DAAS;QAC3C,0EACI;QAAA,wEAA0D;QAAvD,iIAAS,4BAAwB,UAAU,CAAC,IAAC;QAAU,oEAAQ;QAAA,4DAAI;QACtE,wEAAoD;QAAjD,iIAAS,4BAAwB,IAAI,CAAC,IAAC;QAAU,8DAAE;QAAA,4DAAI;QAC1D,wEAA8D;QAA3D,iIAAS,4BAAwB,cAAc,CAAC,IAAC;QAAU,wEAAY;QAAA,4DAAI;QAClF,4DAAM;QACV,4DAAM;QACV,4DAAK;QACL,yEACI;QAAA,0EACI;QAAA,6EAAwB;QAAA,iEAAK;QAAA,4DAAS;QACtC,0EACI;QAAA,wEAA+C;QAA5C,iIAAS,4BAAwB,IAAC;QAAU,uEAAW;QAAA,4DAAI;QAC9D,wEAAY;QAAA,8EAAkB;QAAA,4DAAI;QACtC,4DAAM;QACV,4DAAM;QACV,4DAAK;QACL,0EAAsB;QAAA,8EAA4E;QAAjD,sIAAS,oBAAgB,IAAC;QAAuB,sEAAU;QAAA,4DAAS;QAAA,4DAAK;QAC1H,0EAAuB;QAAA,8EAA0E;QAA9C,sIAAS,gBAAY,IAAC;QAAwB,uEAAW;QAAA,4DAAS;QAAA,4DAAK;QAC1H,0EAAuB;QAAA,8EAA0E;QAA9C,sIAAS,gBAAY,IAAC;QAAwB,uEAAW;QAAA,4DAAS;QAAA,4DAAK;QAC1H,0EACI;QAAA,0EACI;QAAA,6EAAwB;QAAA,8EAAkB;QAAA,4DAAS;QACnD,0EACI;QAAA,wEAA4C;QAAzC,iIAAS,aAAS,WAAW,CAAC,IAAC;QAAU,qEAAS;QAAA,4DAAI;QACzD,wEAAuC;QAApC,iIAAS,aAAS,MAAM,CAAC,IAAC;QAAU,gEAAI;QAAA,4DAAI;QAC/C,wEAAyC;QAAtC,iIAAS,aAAS,QAAQ,CAAC,IAAC;QAAU,kEAAM;QAAA,4DAAI;QACnD,wEAAuC;QAApC,iIAAS,aAAS,MAAM,CAAC,IAAC;QAAU,gEAAI;QAAA,4DAAI;QAC/C,wEAA4C;QAAzC,iIAAS,aAAS,WAAW,CAAC,IAAC;QAAU,qEAAS;QAAA,4DAAI;QAC7D,4DAAM;QACV,4DAAM;QACV,4DAAK;QACT,4DAAK;QACL,2EACI;QADgB,mIAAS,qBAAiB,IAAC;QAC3C,sEAAyB;QACzB,sEAAyB;QACzB,sEAAyB;QAC7B,4DAAM;QACV,4DAAM;QACV,4DAAS;QAET,2EACI;QAAA,0EACI;QAAA,0EAA2B;QAAA,sEAAU;QAAA,4DAAK;QAC1C,0EAA+D;QAA3D,kIAAS,4BAAwB,UAAU,CAAC,IAAC;QAAc,oEAAQ;QAAA,4DAAK;QAC5E,0EAAyD;QAArD,kIAAS,4BAAwB,IAAI,CAAC,IAAC;QAAc,8DAAE;QAAA,4DAAK;QAChE,0EAAmE;QAA/D,kIAAS,4BAAwB,cAAc,CAAC,IAAC;QAAc,wEAAY;QAAA,4DAAK;QACpF,0EAA2B;QAAA,iEAAK;QAAA,4DAAK;QACrC,0EAAoD;QAAhD,kIAAS,4BAAwB,IAAC;QAAc,uEAAW;QAAA,4DAAK;QACpE,0EAAiB;QAAA,8EAAkB;QAAA,4DAAK;QACxC,0EAA0D;QAAtD,kIAAS,oBAAgB,IAAC;QAA4B,qEAAS;QAAA,4DAAK;QACxE,0EAAkD;QAA9C,kIAAS,gBAAY,IAAC;QAAwB,uEAAW;QAAA,4DAAK;QAClE,0EAAkD;QAA9C,kIAAS,gBAAY,IAAC;QAAwB,uEAAW;QAAA,4DAAK;QAClE,0EAA2B;QAAA,8EAAkB;QAAA,4DAAK;QAClD,0EAAiD;QAA7C,kIAAS,aAAS,WAAW,CAAC,IAAC;QAAc,qEAAS;QAAA,4DAAK;QAC/D,0EAA4C;QAAxC,kIAAS,aAAS,MAAM,CAAC,IAAC;QAAc,gEAAI;QAAA,4DAAK;QACrD,0EAA8C;QAA1C,kIAAS,aAAS,QAAQ,CAAC,IAAC;QAAc,kEAAM;QAAA,4DAAK;QACzD,0EAA4C;QAAxC,kIAAS,aAAS,MAAM,CAAC,IAAC;QAAc,gEAAI;QAAA,4DAAK;QACrD,0EAAiD;QAA7C,kIAAS,aAAS,WAAW,CAAC,IAAC;QAAc,qEAAS;QAAA,4DAAK;QACnE,4DAAK;QACT,4DAAM;QAEN,2EACA;QAAA,6EACI;QAAA,sEACI;QAAA,sEAAI;QAAA,mEAAO;QAAA,4DAAK;QAChB,sEAAI;QAAA,sEAAU;QAAA,4DAAK;QACnB,0EAAkB;QAAA,sEAAU;QAAA,4DAAK;QACrC,4DAAK;QACL,sEACI;QAAA,sEACI;QAAA,6EAA2E;QAAnC,qIAAS,4BAAwB,IAAC;QAA1E,4DAA2E;QAAA,8EAA4C;QAAA,yEAAY;QAAA,4DAAQ;QAC/I,4DAAK;QACL,uEACI;QAAA,8EAAkF;QAA5C,sIAAS,yBAAqB,WAAW,CAAC,IAAC;QAAjF,4DAAkF;QAAA,8EAA4C;QAAA,sEAAS;QAAA,4DAAQ;QACnJ,4DAAK;QACL,uEACI;QAAA,0EAA0B;QAAA,4EAAe;QAAA,8EAAyB;QAAA,8DAAC;QAAA,4DAAQ;QAAA,4DAAI;QACnF,4DAAK;QACT,4DAAK;QACL,uEACI;QAAA,uEACI;QAAA,yEAA0C;QAAA,8EAA4C;QAAA,0EAAa;QAAA,4DAAQ;QAC/G,4DAAK;QACL,uEACI;QAAA,8EAAkF;QAA5C,sIAAS,yBAAqB,WAAW,CAAC,IAAC;QAAjF,4DAAkF;QAAA,8EAA4C;QAAA,sEAAS;QAAA,4DAAQ;QACnJ,4DAAK;QACL,uEACI;QAAA,0EAA0B;QAAA,4EAAe;QAAA,8EAAyB;QAAA,8DAAC;QAAA,4DAAQ;QAAA,4DAAI;QACnF,4DAAK;QACT,4DAAK;QACT,4DAAQ;QACR,4DAAM;QAEN,4EACI;QAAA,8EACI;QAAA,4GACI;QAiBR,4DAAQ;QACZ,4DAAM;;QAnBM,4DAAyC;QAAzC,8EAAyC;;6FD3ExC,aAAa;cANzB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,uBAAuB;gBACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;AEzBD;AAAA;AAAA;AAAiD;;AAO1C,MAAM,eAAe;IAE1B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8EALU,eAAe;+FAAf,eAAe;QCP5B,yEACI;QAAA,0EAAoB;QAAA,iFAAsB;QAAA,4DAAO;QACjD,yEACI;QAAA,qEACI;QAAA,wEACI;QAAA,yEACI;QAAA,4EAAwB;QAAA,qEAAU;QAAA,4DAAS;QAC3C,yEACI;QAAA,wEAAY;QAAA,oEAAQ;QAAA,4DAAI;QACxB,wEAAY;QAAA,8DAAE;QAAA,4DAAI;QACtB,4DAAM;QACV,4DAAM;QACV,4DAAK;QACL,yEACI;QAAA,0EACI;QAAA,6EAAwB;QAAA,2EAAe;QAAA,4DAAS;QAChD,0EACI;QAAA,wEAAY;QAAA,+DAAG;QAAA,4DAAI;QACnB,wEAAY;QAAA,+DAAG;QAAA,4DAAI;QACvB,4DAAM;QACV,4DAAM;QACV,4DAAK;QACL,yEAAoB;QAAA,8EAA4B;QAAA,oEAAQ;QAAA,4DAAS;QAAA,4DAAK;QACtE,0EAAsB;QAAA,8EAA8B;QAAA,sEAAU;QAAA,4DAAS;QAAA,4DAAK;QAC5E,0EAAuB;QAAA,8EAA+B;QAAA,uEAAW;QAAA,4DAAS;QAAA,4DAAK;QAC/E,0EAAuB;QAAA,8EAA+B;QAAA,uEAAW;QAAA,4DAAS;QAAA,4DAAK;QACnF,4DAAK;QACT,4DAAM;QACV,4DAAM;;6FDrBO,eAAe;cAL3B,uDAAS;eAAC;gBACT,QAAQ,EAAE,YAAY;gBACtB,WAAW,EAAE,yBAAyB;gBACtC,SAAS,EAAE,CAAC,wBAAwB,CAAC;aACtC;;;;;;;;;;;;;;AEND;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;;ACTpC;AAAA;AAAO,MAAM,IAAI;IAqBb,YAAY,EAAU,EAAE,OAAgB,EAAE,KAAc,EAAE,MAAe,EAAE,SAAkB,EAAE,GAAW,EAAE,MAAc;QACtH,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;CACJ","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Node } from '../../../models/node';\r\n\r\nexport function generateRandomMaze(grid: Node[][]): Node[]{\r\n\r\n    const wallNodes = [];\r\n\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            // returns a random int value from 0 to 1\r\n            const random = Math.floor(Math.random() * 3.5);\r\n            const currentNode = grid[i][j];\r\n            if(random == 1 && !currentNode.isStart && !currentNode.isEnd)\r\n                wallNodes.push(currentNode); \r\n        }\r\n    }\r\n    return wallNodes;\r\n}","import { Node } from '../../../models/node';\r\n\r\nexport function aStar(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n    // intialize\r\n    let openList = [];\r\n    let closedList = [];\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            grid[i][j].f = 0;\r\n            grid[i][j].g = 0;\r\n            grid[i][j].h = 0;\r\n            grid[i][j].parentNode = null;\r\n        }\r\n    }\r\n    openList.push(startNode);\r\n    while(openList.length != 0){\r\n        let indexOfLowestF = 0;\r\n        for(let i = 0; i < openList.length; i++){\r\n            if(openList[i].f < openList[indexOfLowestF].f){\r\n                indexOfLowestF = i;\r\n            }\r\n        }\r\n        const currentNode = openList[indexOfLowestF];\r\n\r\n        // we found the end node\r\n        if(currentNode.isEnd){\r\n            console.log('Found end node!');\r\n            closedList.push(currentNode);\r\n            return closedList;\r\n        }\r\n\r\n        // remove the node with lowest f value from the openList\r\n        openList.splice(indexOfLowestF, 1);\r\n        // and push it into the closedList\r\n        currentNode.closed = true;\r\n        closedList.push(currentNode);\r\n        // get the 4 neighbors of the current node\r\n        const neighbors = getNeighbors(grid, currentNode);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            const neighbor = neighbors[i];\r\n            // if the neighbor already is in the closedList or it is a wall, just skip it\r\n            if(closedList.includes(neighbor) || neighbor.isWall){\r\n                console.log(`Neighbor ${neighbor.id} already in the closedList!`);\r\n                continue;\r\n            }\r\n            \r\n            // the gScore is just the distance from the start node to the current node \r\n            let gScore = currentNode.g + 1;\r\n            // this boolean value is helping us to differentiate if it's the most optimal path to the current node\r\n            let isBestG = false;\r\n\r\n            // first time visiting the node\r\n            if(!openList.includes(neighbor)){\r\n                console.log(`First time visiting Node ${neighbor.row} ${neighbor.column}`);\r\n                // if it's the first time visiting the node, the gscore is the best (at least for the moment)\r\n                isBestG = true;\r\n                // get the heuristic distance \r\n                neighbor.h = getHeuristicDistance(neighbor, endNode, heuristic);\r\n                // add the current neighbor to the openList\r\n                openList.push(neighbor);\r\n            }\r\n\r\n            // if it's not the first time visiting the node but the g score was worse on the previous time\r\n            else if(gScore < neighbor.g){\r\n                isBestG = true;\r\n            }\r\n\r\n            // if we found the temporal best path to this node\r\n            if(isBestG){\r\n                console.log(`Best path to node ${neighbor.row} ${neighbor.column}`);\r\n                neighbor.parentNode = currentNode;\r\n                neighbor.g = gScore;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                console.log(`F: ${neighbor.f} G: ${neighbor.g} H: ${neighbor.h}`);\r\n            }\r\n        }\r\n    }\r\n    // return empty array if there was an error\r\n    return [];\r\n}\r\n\r\nfunction getNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n    const neighbors = [];\r\n    // get the column and row from the current node\r\n    console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n    const column = currentNode.column;\r\n    const row = currentNode.row;\r\n    // get the node above\r\n    if(row > 0){\r\n        var index = \r\n        neighbors.push(grid[row - 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node below\r\n    if(row < 26){\r\n        neighbors.push(grid[row + 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the left\r\n    if(column > 0){\r\n        neighbors.push(grid[row][column - 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the right\r\n    if(column < 68){\r\n        neighbors.push(grid[row][column + 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    \r\n    // only return the neighbors that weren't visited yet\r\n    return neighbors;\r\n}\r\n\r\nfunction getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n    if(heuristic == 'euclidean'){\r\n        const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n        console.log('Euclidean Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n    else{\r\n        const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n        console.log('Manhattan Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function retraceShortestPath(endNode: Node){\r\n    const shortestPath = [];\r\n    // set the current node to the end node\r\n    var currentNode = endNode;\r\n    // backtrack from the end node all the way to the starting node\r\n    while(currentNode.parentNode != null){\r\n        // add the current node to the array of nodes for the shortest path\r\n        shortestPath.unshift(currentNode);\r\n        // then set current node to the current node's previous node ==> Backtracking\r\n        \r\n        currentNode = currentNode.parentNode;\r\n    }\r\n    console.log('[A*] LENGTH: ' + shortestPath.length);\r\n    return shortestPath;\r\n}","import {Node} from '../../../models/node';\r\n\r\n    export function executeDijkstra(grid: Node[][], startNode: Node, endNode: Node){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                }\r\n                else{\r\n                    // setting every node's distance to infinity except the start node\r\n                    grid[i][j].distance = Infinity;\r\n                }\r\n                // setting the parent (previous) node to null\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        // getting all nodes from the current grid\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        // go through every unvisited node until the final node is reached\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            // update the unvisited neighbors\r\n            updateUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    // UNDER CONSTRUCTION\r\n    /*export function getUnvisitedDiagonalNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        let currentNeighbor = null; \r\n        // get the node above\r\n        if(row > 0){\r\n            currentNeighbor = grid[row - 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right above\r\n        if(row > 0 && column < 68){\r\n            currentNeighbor = grid[row - 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            currentNeighbor = grid[row][column + 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right below\r\n        if(row < 26 && column < 68){\r\n            currentNeighbor = grid[row + 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            currentNeighbor = grid[row + 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left below\r\n        if(row < 26 && column > 0){\r\n            currentNeighbor = grid[row + 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            currentNeighbor = grid[row][column - 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left above\r\n        if(row > 0 && column > 0){\r\n            currentNeighbor = grid[row - 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }*/\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node): void{\r\n        // get all unvisited neighbors of the current node\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            if(node.isDiagonal){\r\n                node.distance = currentNode.distance + 1.1;\r\n            }\r\n            else{\r\n                // \"1\" is the standard weight (distance) from one node to its neighbors\r\n                node.distance = currentNode.distance + 1;\r\n            }\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        return shortestPath;\r\n    }","import {Node} from '../../../models/node';\r\n\r\n    export function executeExperimental(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                else{\r\n                    grid[i][j].distance = Infinity;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            updateUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    function getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n        if(heuristic == 'euclidean'){\r\n            const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n            console.log('Euclidean Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n        else{\r\n            const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n            console.log('Manhattan Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node): void{\r\n        // get all unvisited neighbors of the current node\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            node.distance = currentNode.distance + node.h + 1;\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            var index = \r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        console.log('[DIJKSTRA] LENGTH: ' + shortestPath.length);\r\n        return shortestPath;\r\n    }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Pathfinder';\n  constructor(private titleService: Title){\n    this.titleService.setTitle('Pathfinder');\n  }\n}\n","<div class=\"wrapper\">\n  <html>\n    <body>\n      <app-grid></app-grid>\n    </body>\n  </html>\n</div>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { GridComponent } from './grid/grid.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    GridComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatTooltipModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport {Node} from '../../models/node';\nimport {executeDijkstra, createShortestPath} from '../algorithms/pathfinding/dijkstra';\nimport { aStar, retraceShortestPath } from '../algorithms/pathfinding/astar';\nimport { executeExperimental } from '../algorithms/pathfinding/dijkstraexperimental';\nimport { generateRandomMaze } from '../algorithms/maze/randomMaze';\n\n\nconst GRID_NODES = [];\nlet ALGORITHM = \"nothing\";\nlet distance = 'euclidean';\nlet showProcess = true;\nlet animationSpeed = 20;\nlet mouseIsPressed = false;\nlet startIsMoving = false;\nlet endIsMoving = false;\nlet isRunning = false;\nlet startCoordiantes = new Map();\nlet endCoordinates = new Map();\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\n\nexport class GridComponent implements OnInit {\n\n  exampleArray = [];\n  \n  constructor() {}\n\n  nodes = GRID_NODES;\n  algorithm = ALGORITHM;\n\n  ngOnInit(): void {\n    //generates the nodes for the grid\n    this.generateTwoDimensionalGrid();\n    // setting the default coordinates for start node and end node\n    startCoordiantes.set('Row', 13);\n    startCoordiantes.set('Col', 10);\n    endCoordinates.set('Row', 13);\n    endCoordinates.set('Col', 58);\n    // setting the default checkboxes\n    this.setHeuristicCheckboxes();\n    this.initShowProcessCheckbox();\n  }\n\n  generateTwoDimensionalGrid(): void{\n    let index: number = 0;\n    for(let row: number = 0; row <= 26; row++){\n      const currentRow = [];\n      for(let column: number = 0; column < 69; column++){\n        if(row == 13 && column == 10){\n          currentRow.push(new Node(index, true, false, false, false, row, column));\n        }\n        else if(row == 13 && column == 58){\n          currentRow.push(new Node(index, false, true, false, false, row, column));\n        }\n        else{\n          currentRow.push(new Node(index, false, false,  false, false, row, column));\n        }\n        index++;\n      }\n      GRID_NODES.push(currentRow);\n    }\n  }\n\n  checkAlgorithm(): void{\n    if(isRunning) return;\n    if(this.algorithm == 'nothing'){\n      document.getElementById('btn-visualize').textContent = \"Pick an algortihm!\"\n    }\n    else{\n      document.getElementById('btn-visualize').textContent = 'Visualizing...';\n      document.getElementById('btn-visualize').style.backgroundColor = '#ff0000';\n      this.clearVisitedNodes();\n      isRunning = true;\n      this.visualizeAlgorithm();\n    }\n  }\n\n  visualizeAlgorithm(): void{\n    if(this.algorithm == 'Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeDijkstra(this.nodes, startNode, endNode);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n    else if(this.algorithm == 'A*'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = aStar(this.nodes, startNode, endNode, distance);\n      console.log('VISITED NODES:' + visitedNodes.length);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = retraceShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n    else if(this.algorithm == 'Alt-Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeExperimental(this.nodes, startNode, endNode, distance);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else {\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes: Node[], shortestPath: Node[], showProcess: boolean){\n    if(showProcess){\n      for(let i = 0; i <= visitedNodes.length; i++){\n        if(i == visitedNodes.length){\n          setTimeout(() => {\n            console.log('[GRID] Shortest Path: ' + shortestPath.length);\n            console.log('[GRID]: ' + shortestPath[0].row + ' ' + shortestPath[0].column);\n            this.animateShortestPath(shortestPath);\n          }, i * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          if(visitedNodes[i].isStart || visitedNodes[i].isEnd){}\n          else{\n            visitedNodes[i].isActuallyVisited = true;\n          }\n        }, i * animationSpeed);\n      }\n    }\n    else{\n      this.animateShortestPath(shortestPath);\n    }\n  }\n\n  animateShortestPath(shortestPath: Node[]){\n    for(let i = 0; i <= shortestPath.length; i++){\n      setTimeout(() => {\n        if(i == shortestPath.length){\n          this.algorithm = 'nothing';\n          isRunning = false;\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n          setTimeout(() => {\n            document.getElementById('btn-visualize').textContent = 'Visualize!'\n          }, 1500);\n          document.getElementById('btn-visualize').textContent = 'Done!'\n          return;\n        }\n        console.log('[ANIMATE_SHORTEST_PATH]: ' + shortestPath[i].row + ' ' + shortestPath[i].column);\n        shortestPath[i].isActuallyVisited = false;\n        if(shortestPath[i].isEnd){}\n        else {shortestPath[i].isShortestPath = true;}\n      }, i * animationSpeed*2);\n    }\n  }\n\n  visualizeMazeAlgorithm(){\n    if(isRunning) return;\n    console.log(\"Generating random maze...\");\n    this.clearBoard();\n    isRunning = true;\n    const walls = generateRandomMaze(this.nodes);\n    this.animateMazeAlgorithm(walls);\n  }\n\n  animateMazeAlgorithm(walls: Node[]){\n    console.log(\"Animating random maze...\");\n    for(let i = 0; i <= walls.length; i++){\n      setTimeout(() => {\n      if(i == walls.length){\n        isRunning = false;\n        document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!'\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'Done!'\n        return;\n      }\n        walls[i].isWall = true;\n      }, i * 10);\n    }\n  }\n\n  toggleWall(row: number, column: number){\n    if((this.nodes[row][column].isStart || this.nodes[row][column].isEnd)){\n      console.log('Cannot toggle wall!');\n      return;\n    }\n    else if(isRunning){}\n    else{\n        this.nodes[row][column].isWall = !this.nodes[row][column].isWall;\n    }\n    console.log('ROW: ' + this.nodes[row][column].row + ' COLUMN: ' + this.nodes[row][column].column);\n  }\n\n  setStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = true;\n    startCoordiantes.set('Row', row);\n    startCoordiantes.set('Col', column);\n  }\n\n  deleteStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = false;\n  }\n\n  setEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = true;\n    endCoordinates.set('Row', row);\n    endCoordinates.set('Col', column);\n  }\n\n  deleteEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = false;\n  }\n\n  mouseDown(row: number, col: number){\n    mouseIsPressed = true;\n    if(this.nodes[row][col].isStart){\n      startIsMoving = true;\n    }\n    else if(this.nodes[row][col].isEnd){\n      endIsMoving = true;\n    }\n    else {\n      this.toggleWall(row, col);\n    } \n    console.log('Mouse down');\n  }\n\n  mouseEnter(row: number, column: number){\n    if(mouseIsPressed && !startIsMoving && !endIsMoving){\n      this.toggleWall(row, column);\n    }\n    else if(mouseIsPressed && startIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n      }\n      this.setStart(row, column);\n    }\n    else if(mouseIsPressed && endIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n      }\n      this.setEnd(row, column);\n    }\n    else{}\n  }\n\n  mouseLeave(row: number, column: number){\n    if(mouseIsPressed && startIsMoving){\n      this.deleteStart(row, column);   \n    }\n    else if(mouseIsPressed && endIsMoving){\n      this.deleteEnd(row, column);\n    }\n    else {}\n  }\n\n  mouseUp(row?: number, column?: number){\n    mouseIsPressed = false;\n    startIsMoving = false;\n    endIsMoving = false;\n    console.log('Mouse up');\n  }\n\n  clearWalls(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isWall)\n        this.nodes[i][j].isWall = false;\n      }\n    }\n  }\n\n  clearBoard(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        this.nodes[i][j].isWall = false;\n        this.nodes[i][j].isVisited = false;\n        this.nodes[i][j].isActuallyVisited = false;\n        this.nodes[i][j].isShortestPath = false;\n      }\n    }\n    this.resetStatistics();\n  }\n\n  resetStatistics(): void{\n    document.getElementById('visitedNodes').style.color = 'white';\n    document.getElementById('shortestPath').style.color = 'white';\n    document.getElementById('visitedNodes').textContent = '0';\n    document.getElementById('shortestPath').textContent = '0';\n  }\n\n  clearVisitedNodes(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited || this.nodes[i][j].isVisited || this.nodes[i][j].closed){\n          this.nodes[i][j].isVisited = false;\n          this.nodes[i][j].isActuallyVisited = false;\n          this.nodes[i][j].isShortestPath = false;\n          this.nodes[i][j].closed = false;\n        }\n      }\n    }\n    this.resetStatistics();\n  }\n\n  setPathfindingAlgorithm(algorithm: string): void{\n    //this.openDijkstraDialog();\n    this.algorithm = algorithm;\n    document.getElementById('btn-visualize').textContent = `Visualize ${this.algorithm}!`;\n    console.log(this.algorithm);\n  }\n\n  setSpeed(speed: string): void{\n    switch(speed){\n      case \"Very Fast\":\n        animationSpeed = 5;\n        break;\n      case \"Fast\":\n        animationSpeed = 10;\n      case \"Normal\":\n        animationSpeed = 20;\n        break;\n      case \"Slow\":\n        animationSpeed = 40;\n        break;\n      case \"Very Slow\":\n        animationSpeed = 60;\n    }\n  }\n\n  initShowProcessCheckbox(): void{\n    const showProcessCheckbox = document.getElementById('showProcess') as HTMLInputElement;\n    showProcess = true;\n    showProcessCheckbox.checked = true;\n\n  }\n\n  setShowProcessCheckbox(): void{\n    const showProcessCheckbox = document.getElementById('showProcess') as HTMLInputElement;\n\n    if(showProcessCheckbox.checked){\n      showProcess = true;\n      console.log(showProcess);\n    }\n    else {\n      showProcess = false;\n      console.log(showProcess);\n    }\n  }\n\n  setStatistics(visitedNodes: Node[], shortestPath: Node[], showProcess: boolean): void{\n    if(showProcess){\n      for(let i = 0; i <= visitedNodes.length; i++){\n        if(i == visitedNodes.length){\n          setTimeout(() => {\n            for(let j = 0; j < shortestPath.length; j++){\n              setTimeout(() => {\n                document.getElementById('visitedNodes').style.color = '#0398f4';\n                document.getElementById('shortestPath').style.color = 'yellow';\n                document.getElementById('shortestPath').textContent = `${j}`;\n              }, j * animationSpeed*2);\n            }\n          }, i * animationSpeed);\n        }\n        else{\n          setTimeout(() => {\n            document.getElementById('visitedNodes').style.color = '#ff0000';\n            document.getElementById('visitedNodes').textContent = `${i}`;\n          }, i * animationSpeed);\n        }\n      }\n    }\n    else{\n      for(let i = 0; i < shortestPath.length; i++){\n        setTimeout(() => {\n          document.getElementById('shortestPath').style.color = 'yellow';\n          document.getElementById('shortestPath').textContent = `${i}`;\n        }, i * animationSpeed*2);\n      }\n    }\n  }\n\n  setHeuristicCheckboxes(): void{\n    let euclideanCheckbox = document.getElementById('euclidean') as HTMLInputElement;\n    let manhattanCheckbox = document.getElementById('manhattan') as HTMLInputElement;\n\n    if(distance == 'euclidean'){\n      euclideanCheckbox.checked = true;\n      manhattanCheckbox.checked = false;\n    }\n    else{\n      euclideanCheckbox.checked = false;\n      manhattanCheckbox.checked = true;\n    }\n  }\n\n  setHeuristicDistance(heuristic: string): void{\n    distance = heuristic;\n    this.setHeuristicCheckboxes();\n  }\n\n  checkVisited(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited && this.nodes[i][j].isShortestPath)\n        return true;\n      }\n    }\n    return false;\n  }\n\n  checkClosed(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].closed)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  // checks if the given algorithm found the final node\n  checkIfFound(visitedNodes: Node[]): boolean{\n    if(visitedNodes.length == 0){\n      return false;\n    }\n    else if(visitedNodes[visitedNodes.length-1].isEnd){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  toggleSlideMenu():void{\n    const slideMenu = document.querySelector('.slideMenu');\n    const burger = document.querySelector('.burger')\n\n    slideMenu.classList.toggle('slideMenu-active');\n    burger.classList.toggle('toggle');\n    console.log(slideMenu.classList);\n  }\n}\n","<header>\n    <nav>\n        <a href=\"#\" class=\"title\"><span class=\"titleName\">Pathfinder</span></a>\n        <ul class=\"nav-links\">\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setPathfindingAlgorithm('Dijkstra')\" href=\"#\">Dijkstra</a>\n                        <a (click)=\"setPathfindingAlgorithm('A*')\" href=\"#\">A*</a>\n                        <a (click)=\"setPathfindingAlgorithm('Alt-Dijkstra')\" href=\"#\">Alt-Dijkstra</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Mazes</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"visualizeMazeAlgorithm()\" href=\"#\">Random Maze</a>\n                        <a href=\"#\">To be continued...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"visualize\"><button id=\"btn-visualize\" (click)=\"checkAlgorithm()\" class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button id=\"btn-clearBoard\" (click)=\"clearBoard()\" class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button id=\"btn-clearWalls\" (click)=\"clearWalls()\" class=\"btn-clearWalls\">Clear Walls</button></li>\n            <li class=\"speed\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Speed of Animation</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setSpeed('Very Fast')\" href=\"#\">Very Fast</a>\n                        <a (click)=\"setSpeed('Fast')\" href=\"#\">Fast</a>\n                        <a (click)=\"setSpeed('Normal')\" href=\"#\">Normal</a>\n                        <a (click)=\"setSpeed('Slow')\" href=\"#\">Slow</a>\n                        <a (click)=\"setSpeed('Very Slow')\" href=\"#\">Very Slow</a>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <div class=\"burger\" (click)=\"toggleSlideMenu()\">\n            <div class=\"line1\"></div>\n            <div class=\"line2\"></div>\n            <div class=\"line3\"></div>\n        </div>\n    </nav>\n</header>\n\n<div class=\"slideMenu\">\n    <ul class=\"navLinks\">\n        <li class=\"slideMenuTitle\">Algorithms</li>\n        <li (click)=\"setPathfindingAlgorithm('Dijkstra')\" class=\"item\">Dijkstra</li>\n        <li (click)=\"setPathfindingAlgorithm('A*')\" class=\"item\">A*</li>\n        <li (click)=\"setPathfindingAlgorithm('Alt-Dijkstra')\" class=\"item\">Alt-Dijkstra</li>\n        <li class=\"slideMenuTitle\">Mazes</li>\n        <li (click)=\"visualizeMazeAlgorithm()\" class=\"item\">Random Maze</li>\n        <li class=\"item\">To be continued...</li>\n        <li (click)=\"checkAlgorithm()\" class=\"slideMenuVisualize\">Visualize</li>\n        <li (click)=\"clearBoard()\" class=\"slideMenuClear\">Clear Board</li>\n        <li (click)=\"clearWalls()\" class=\"slideMenuClear\">Clear Walls</li>\n        <li class=\"slideMenuTitle\">Speed of Animation</li>\n        <li (click)=\"setSpeed('Very Fast')\" class=\"item\">Very Fast</li>\n        <li (click)=\"setSpeed('Fast')\" class=\"item\">Fast</li>\n        <li (click)=\"setSpeed('Normal')\" class=\"item\">Normal</li>\n        <li (click)=\"setSpeed('Slow')\" class=\"item\">Slow</li>\n        <li (click)=\"setSpeed('Very Slow')\" class=\"item\">Very Slow</li>\n    </ul>\n</div>\n\n<div class=\"options\">\n<table class=\"options-container\">\n    <tr>\n        <th>General</th>\n        <th>Heuristics</th>\n        <th class=\"stats\">Statistics</th>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"showProcess\" type=\"checkbox\" (click)=\"setShowProcessCheckbox()\"><label class=\"checkboxLabel\" for=\"checkbox\">Show Process</label>\n        </td>\n        <td>\n            <input id=\"euclidean\" type=\"checkbox\" (click)=\"setHeuristicDistance('euclidean')\"><label class=\"checkboxLabel\" for=\"checkbox\">Euclidean</label>\n        </td>\n        <td>\n            <p id=\"visitedNodesStats\">Visited Nodes: <label id=\"visitedNodes\">0</label></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"bidirectional\" type=\"checkbox\"><label class=\"checkboxLabel\" for=\"checkbox\">Bidirectional</label>\n        </td>\n        <td>\n            <input id=\"manhattan\" type=\"checkbox\" (click)=\"setHeuristicDistance('manhattan')\"><label class=\"checkboxLabel\" for=\"checkbox\">Manhattan</label>\n        </td>\n        <td>\n            <p id=\"shortestPathStats\">Shortest path: <label id=\"shortestPath\">0</label></p>\n        </td>\n    </tr>\n</table>\n</div>\n\n<div class=\"grid-container\">\n    <table class=\"grid\">\n        <tr *ngFor=\"let rows of nodes; index as row;\">\n            <td *ngFor=\"let node of rows; index as col;\"\n            draggable=\"false\"\n            (mousedown)=\"mouseDown(row, col)\"\n            (mouseenter)=\"mouseEnter(row, col)\"\n            (mouseleave)=\"mouseLeave(row, col)\"\n            (mouseup)=\"mouseUp(row, col)\">\n                <div [ngClass]=\"{\n                    'isStart': node.isStart,\n                    'isEnd': node.isEnd,\n                    'isWall': node.isWall,\n                    'isVisited': node.isActuallyVisited,\n                    'isShortestPath': node.isShortestPath,\n                    'node': true\n                    }\" id=\"node.id\">\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>","import { Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"navbar-container\">\n    <span class=\"title\">Pathfinding Visualizer</span>\n    <nav class=\"navmenu-brand\">\n        <ul>\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">Dijkstra</a>\n                        <a href=\"#\">A*</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Maze & Patterns</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">...</a>\n                        <a href=\"#\">...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"addBomb\"><button class=\"btn-addBomb\">Add Bomb</button></li>\n            <li class=\"visualize\"><button class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button class=\"btn-clearWalls\">Clear Walls</button></li>\n        </ul>\n    </nav>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { GridComponent } from 'src/app/grid/grid.component';\r\n\r\nexport class Node{\r\n    id: number;\r\n    isStart: boolean;\r\n    isEnd: boolean;\r\n    isWall: boolean;\r\n    isVisited: boolean;\r\n    isDiagonal: boolean;\r\n    distance: number;\r\n    //###########\r\n    // for astar algo\r\n    f: number;\r\n    g: number;\r\n    h: number;\r\n    closed: boolean;\r\n    //############\r\n    row: number;\r\n    column: number;\r\n    parentNode: Node;\r\n    isShortestPath: boolean;\r\n    isActuallyVisited: boolean;\r\n\r\n    constructor(id: number, isStart: boolean, isEnd: boolean, isWall: boolean, isVisited: boolean, row: number, column: number){\r\n        this.id = id;\r\n        this.isStart = isStart;\r\n        this.isEnd = isEnd;\r\n        this.isWall = isWall;\r\n        this.isVisited = isVisited;\r\n        this.row = row;\r\n        this.column = column;\r\n        this.parentNode = null;\r\n        this.isShortestPath = false;\r\n        this.isActuallyVisited = false;\r\n        this.closed = false;\r\n        this.isDiagonal = false;\r\n    }\r\n}"],"sourceRoot":"webpack:///"}