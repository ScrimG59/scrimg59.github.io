{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/algorithms/maze/randomMaze.ts","webpack:///src/app/algorithms/pathfinding/astar.ts","webpack:///src/app/algorithms/pathfinding/dijkstra.ts","webpack:///src/app/algorithms/pathfinding/dijkstraexperimental.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/grid/grid.component.ts","webpack:///src/app/grid/grid.component.html","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/models/node.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","generateRandomMaze","grid","wallNodes","i","length","j","random","Math","floor","currentNode","isStart","isEnd","push","aStar","startNode","endNode","heuristic","openList","closedList","f","g","h","parentNode","indexOfLowestF","console","log","splice","closed","neighbors","getNeighbors","neighbor","includes","isWall","gScore","isBestG","row","column","getHeuristicDistance","index","result","sqrt","pow","abs","retraceShortestPath","shortestPath","unshift","executeDijkstra","visitedNodes","unvisitedNodes","distance","Infinity","getAll","sort","a","b","shift","isVisited","updateUnvisitedNeighbors","getUnvisitedNeighbors","filter","unvisitedNeighbors","forEach","node","isDiagonal","nodes","createShortestPath","executeExperimental","routes","AppRoutingModule","forRoot","imports","AppComponent","titleService","title","setTitle","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","GRID_NODES","ALGORITHM","showProcess","animationSpeed","mouseIsPressed","startIsMoving","endIsMoving","isRunning","startCoordiantes","Map","endCoordinates","lastPosition","GridComponent","exampleArray","algorithm","generateTwoDimensionalGrid","set","setHeuristicCheckboxes","initShowProcessCheckbox","currentRow","document","getElementById","textContent","style","backgroundColor","clearVisitedNodes","slideMenu","querySelector","classList","contains","toggleSlideMenu","visualizeAlgorithm","startRow","get","startCol","endRow","endCol","checkIfFound","setTimeout","animateAlgorithm","setStatistics","animateShortestPath","isActuallyVisited","isShortestPath","clearBoard","walls","animateMazeAlgorithm","col","toggleWall","setStart","setEnd","deleteStart","deleteEnd","resetStatistics","currentStartRow","currentStartCol","currentEndRow","currentEndCol","color","speed","showProcessCheckbox","checked","euclideanCheckbox","manhattanCheckbox","burger","toggle","setPathfindingAlgorithm","visualizeMazeAlgorithm","checkAlgorithm","clearWalls","setSpeed","setShowProcessCheckbox","setHeuristicDistance","NavbarComponent","environment","production","bootstrapModule","err","error","Node"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Node } from '../../../models/node';\r\n\r\nexport function generateRandomMaze(grid: Node[][]): Node[]{\r\n\r\n    const wallNodes = [];\r\n\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            // returns a random int value from 0 to 1\r\n            const random = Math.floor(Math.random() * 3.5);\r\n            const currentNode = grid[i][j];\r\n            if(random == 1 && !currentNode.isStart && !currentNode.isEnd)\r\n                wallNodes.push(currentNode); \r\n        }\r\n    }\r\n    return wallNodes;\r\n}","import { Node } from '../../../models/node';\r\n\r\nexport function aStar(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n    // intialize\r\n    let openList = [];\r\n    let closedList = [];\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            grid[i][j].f = 0;\r\n            grid[i][j].g = 0;\r\n            grid[i][j].h = 0;\r\n            grid[i][j].parentNode = null;\r\n        }\r\n    }\r\n    openList.push(startNode);\r\n    while(openList.length != 0){\r\n        let indexOfLowestF = 0;\r\n        for(let i = 0; i < openList.length; i++){\r\n            if(openList[i].f < openList[indexOfLowestF].f){\r\n                indexOfLowestF = i;\r\n            }\r\n        }\r\n        const currentNode = openList[indexOfLowestF];\r\n\r\n        // we found the end node\r\n        if(currentNode.isEnd){\r\n            console.log('Found end node!');\r\n            closedList.push(currentNode);\r\n            return closedList;\r\n        }\r\n\r\n        // remove the node with lowest f value from the openList\r\n        openList.splice(indexOfLowestF, 1);\r\n        // and push it into the closedList\r\n        currentNode.closed = true;\r\n        closedList.push(currentNode);\r\n        // get the 4 neighbors of the current node\r\n        const neighbors = getNeighbors(grid, currentNode);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            const neighbor = neighbors[i];\r\n            // if the neighbor already is in the closedList or it is a wall, just skip it\r\n            if(closedList.includes(neighbor) || neighbor.isWall){\r\n                console.log(`Neighbor ${neighbor.id} already in the closedList!`);\r\n                continue;\r\n            }\r\n            \r\n            // the gScore is just the distance from the start node to the current node \r\n            let gScore = currentNode.g + 1;\r\n            // this boolean value is helping us to differentiate if it's the most optimal path to the current node\r\n            let isBestG = false;\r\n\r\n            // first time visiting the node\r\n            if(!openList.includes(neighbor)){\r\n                console.log(`First time visiting Node ${neighbor.row} ${neighbor.column}`);\r\n                // if it's the first time visiting the node, the gscore is the best (at least for the moment)\r\n                isBestG = true;\r\n                // get the heuristic distance \r\n                neighbor.h = getHeuristicDistance(neighbor, endNode, heuristic);\r\n                // add the current neighbor to the openList\r\n                openList.push(neighbor);\r\n            }\r\n\r\n            // if it's not the first time visiting the node but the g score was worse on the previous time\r\n            else if(gScore < neighbor.g){\r\n                isBestG = true;\r\n            }\r\n\r\n            // if we found the temporal best path to this node\r\n            if(isBestG){\r\n                console.log(`Best path to node ${neighbor.row} ${neighbor.column}`);\r\n                neighbor.parentNode = currentNode;\r\n                neighbor.g = gScore;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                console.log(`F: ${neighbor.f} G: ${neighbor.g} H: ${neighbor.h}`);\r\n            }\r\n        }\r\n    }\r\n    // return empty array if there was an error\r\n    return [];\r\n}\r\n\r\nfunction getNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n    const neighbors = [];\r\n    // get the column and row from the current node\r\n    console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n    const column = currentNode.column;\r\n    const row = currentNode.row;\r\n    // get the node above\r\n    if(row > 0){\r\n        var index = \r\n        neighbors.push(grid[row - 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node below\r\n    if(row < 26){\r\n        neighbors.push(grid[row + 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the left\r\n    if(column > 0){\r\n        neighbors.push(grid[row][column - 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the right\r\n    if(column < 68){\r\n        neighbors.push(grid[row][column + 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    \r\n    // only return the neighbors that weren't visited yet\r\n    return neighbors;\r\n}\r\n\r\nfunction getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n    if(heuristic == 'euclidean'){\r\n        const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n        console.log('Euclidean Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n    else{\r\n        const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n        console.log('Manhattan Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function retraceShortestPath(endNode: Node){\r\n    const shortestPath = [];\r\n    // set the current node to the end node\r\n    var currentNode = endNode;\r\n    // backtrack from the end node all the way to the starting node\r\n    while(currentNode.parentNode != null){\r\n        // add the current node to the array of nodes for the shortest path\r\n        shortestPath.unshift(currentNode);\r\n        // then set current node to the current node's previous node ==> Backtracking\r\n        \r\n        currentNode = currentNode.parentNode;\r\n    }\r\n    console.log('[A*] LENGTH: ' + shortestPath.length);\r\n    return shortestPath;\r\n}","import {Node} from '../../../models/node';\r\n\r\n    export function executeDijkstra(grid: Node[][], startNode: Node, endNode: Node){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                }\r\n                else{\r\n                    // setting every node's distance to infinity except the start node\r\n                    grid[i][j].distance = Infinity;\r\n                }\r\n                // setting the parent (previous) node to null\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        // getting all nodes from the current grid\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        // go through every unvisited node until the final node is reached\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            // update the unvisited neighbors\r\n            updateUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    // UNDER CONSTRUCTION\r\n    /*export function getUnvisitedDiagonalNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        let currentNeighbor = null; \r\n        // get the node above\r\n        if(row > 0){\r\n            currentNeighbor = grid[row - 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right above\r\n        if(row > 0 && column < 68){\r\n            currentNeighbor = grid[row - 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            currentNeighbor = grid[row][column + 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right below\r\n        if(row < 26 && column < 68){\r\n            currentNeighbor = grid[row + 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            currentNeighbor = grid[row + 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left below\r\n        if(row < 26 && column > 0){\r\n            currentNeighbor = grid[row + 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            currentNeighbor = grid[row][column - 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left above\r\n        if(row > 0 && column > 0){\r\n            currentNeighbor = grid[row - 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }*/\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node): void{\r\n        // get all unvisited neighbors of the current node\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            if(node.isDiagonal){\r\n                node.distance = currentNode.distance + 1.1;\r\n            }\r\n            else{\r\n                // \"1\" is the standard weight (distance) from one node to its neighbors\r\n                node.distance = currentNode.distance + 1;\r\n            }\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        return shortestPath;\r\n    }","import {Node} from '../../../models/node';\r\n\r\n    export function executeExperimental(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                else{\r\n                    grid[i][j].distance = Infinity;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            updateUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    function getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n        if(heuristic == 'euclidean'){\r\n            const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n            console.log('Euclidean Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n        else{\r\n            const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n            console.log('Manhattan Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node): void{\r\n        // get all unvisited neighbors of the current node\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            node.distance = currentNode.distance + node.h + 1;\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            var index = \r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        console.log('[DIJKSTRA] LENGTH: ' + shortestPath.length);\r\n        return shortestPath;\r\n    }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Pathfinder';\n  constructor(private titleService: Title){\n    this.titleService.setTitle('Pathfinder');\n  }\n}\n","<div class=\"wrapper\">\n  <html>\n    <body>\n      <app-grid></app-grid>\n    </body>\n  </html>\n</div>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { GridComponent } from './grid/grid.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    GridComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatTooltipModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport {Node} from '../../models/node';\nimport {executeDijkstra, createShortestPath} from '../algorithms/pathfinding/dijkstra';\nimport { aStar, retraceShortestPath } from '../algorithms/pathfinding/astar';\nimport { executeExperimental } from '../algorithms/pathfinding/dijkstraexperimental';\nimport { generateRandomMaze } from '../algorithms/maze/randomMaze';\n\n\nconst GRID_NODES = [];\nlet ALGORITHM = \"nothing\";\nlet distance = 'euclidean';\nlet showProcess = true;\nlet animationSpeed = 20;\nlet mouseIsPressed = false;\nlet startIsMoving = false;\nlet endIsMoving = false;\nlet isRunning = false;\nlet isWall = false;\nlet startCoordiantes = new Map();\nlet endCoordinates = new Map();\nlet lastPosition = new Map();\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\n\nexport class GridComponent implements OnInit {\n\n  exampleArray = [];\n  \n  constructor() {}\n\n  nodes = GRID_NODES;\n  algorithm = ALGORITHM;\n\n  ngOnInit(): void {\n    //generates the nodes for the grid\n    this.generateTwoDimensionalGrid();\n    // setting the default coordinates for start node and end node\n    startCoordiantes.set('Row', 13);\n    startCoordiantes.set('Col', 10);\n    endCoordinates.set('Row', 13);\n    endCoordinates.set('Col', 58);\n    // setting the default checkboxes\n    this.setHeuristicCheckboxes();\n    this.initShowProcessCheckbox();\n  }\n\n  // generates a two-dimensional grid\n  generateTwoDimensionalGrid(): void{\n    let index: number = 0;\n    for(let row: number = 0; row <= 26; row++){\n      const currentRow = [];\n      for(let column: number = 0; column < 69; column++){\n        if(row == 13 && column == 10){\n          currentRow.push(new Node(index, true, false, false, false, row, column));\n        }\n        else if(row == 13 && column == 58){\n          currentRow.push(new Node(index, false, true, false, false, row, column));\n        }\n        else{\n          currentRow.push(new Node(index, false, false,  false, false, row, column));\n        }\n        index++;\n      }\n      GRID_NODES.push(currentRow);\n    }\n  }\n\n  // method that checks if there's a algorithm selected and if there's is one, it calls the visualizeAlgorithm-method\n  checkAlgorithm(): void{\n    if(isRunning) return;\n    if(this.algorithm == 'nothing'){\n      document.getElementById('btn-visualize').textContent = \"Pick an algortihm!\"\n    }\n    else{\n      document.getElementById('btn-visualize').textContent = 'Visualizing...';\n      document.getElementById('btn-visualize').style.backgroundColor = '#ff0000';\n      this.clearVisitedNodes();\n      isRunning = true;\n      const slideMenu = document.querySelector('.slideMenu');\n      if(slideMenu.classList.contains('slideMenu-active')){\n        this.toggleSlideMenu();\n      } \n      this.visualizeAlgorithm();\n    }\n  }\n\n  // method that prepares everything for the animation-algorithm\n  visualizeAlgorithm(): void{\n    if(this.algorithm == 'Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeDijkstra(this.nodes, startNode, endNode);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n    else if(this.algorithm == 'A*'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = aStar(this.nodes, startNode, endNode, distance);\n      console.log('VISITED NODES:' + visitedNodes.length);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = retraceShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n    else if(this.algorithm == 'Alt-Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeExperimental(this.nodes, startNode, endNode, distance);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else {\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath, showProcess);\n        this.setStatistics(visitedNodes, shortestPath, showProcess);\n      }\n    }\n  }\n\n  // animates the selected algorithm\n  animateAlgorithm(visitedNodes: Node[], shortestPath: Node[], showProcess: boolean){\n    if(showProcess){\n      for(let i = 0; i <= visitedNodes.length; i++){\n        if(i == visitedNodes.length){\n          setTimeout(() => {\n            console.log('[GRID] Shortest Path: ' + shortestPath.length);\n            console.log('[GRID]: ' + shortestPath[0].row + ' ' + shortestPath[0].column);\n            this.animateShortestPath(shortestPath);\n          }, i * animationSpeed);\n          return;\n        }\n        setTimeout(() => {\n          if(visitedNodes[i].isStart || visitedNodes[i].isEnd){}\n          else{\n            visitedNodes[i].isActuallyVisited = true;\n          }\n        }, i * animationSpeed);\n      }\n    }\n    else{\n      this.animateShortestPath(shortestPath);\n    }\n  }\n\n  // animates the shortest path\n  animateShortestPath(shortestPath: Node[]){\n    for(let i = 0; i <= shortestPath.length; i++){\n      setTimeout(() => {\n        if(i == shortestPath.length){\n          this.algorithm = 'nothing';\n          isRunning = false;\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n          setTimeout(() => {\n            document.getElementById('btn-visualize').textContent = 'Visualize!'\n          }, 1500);\n          document.getElementById('btn-visualize').textContent = 'Done!'\n          return;\n        }\n        console.log('[ANIMATE_SHORTEST_PATH]: ' + shortestPath[i].row + ' ' + shortestPath[i].column);\n        shortestPath[i].isActuallyVisited = false;\n        if(shortestPath[i].isEnd){}\n        else {shortestPath[i].isShortestPath = true;}\n      }, i * animationSpeed*2);\n    }\n  }\n\n  // method that checks some constraints and calls the animation-method\n  visualizeMazeAlgorithm(){\n    if(isRunning) return;\n    console.log(\"Generating random maze...\");\n    this.clearBoard();\n    isRunning = true;\n    const walls = generateRandomMaze(this.nodes);\n    this.animateMazeAlgorithm(walls);\n  }\n\n  // method that animates the maze algorithms\n  animateMazeAlgorithm(walls: Node[]){\n    console.log(\"Animating random maze...\");\n    for(let i = 0; i <= walls.length; i++){\n      setTimeout(() => {\n      if(i == walls.length){\n        isRunning = false;\n        document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!'\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'Done!'\n        return;\n      }\n        walls[i].isWall = true;\n      }, i * 10);\n    }\n  }\n\n  // helper method to set or delete a wall node\n  toggleWall(row: number, column: number){\n    if((this.nodes[row][column].isStart || this.nodes[row][column].isEnd)){\n      console.log('Cannot toggle wall!');\n      return;\n    }\n    else if(isRunning){}\n    else{\n        this.nodes[row][column].isWall = !this.nodes[row][column].isWall;\n    }\n    console.log('ROW: ' + this.nodes[row][column].row + ' COLUMN: ' + this.nodes[row][column].column);\n  }\n\n  // sets the start node\n  setStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = true;\n    startCoordiantes.set('Row', row);\n    startCoordiantes.set('Col', column);\n  }\n\n  // deletes the start node\n  deleteStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = false;\n  }\n\n  // sets the end node\n  setEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = true;\n    endCoordinates.set('Row', row);\n    endCoordinates.set('Col', column);\n  }\n\n  // deletes the end node\n  deleteEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = false;\n  }\n\n  /* \n  ######## These are all the mouse events that handle things like dragging and moving nodes ######### \n  */\n  mouseDown(row: number, col: number){\n    mouseIsPressed = true;\n    if(this.nodes[row][col].isStart){\n      startIsMoving = true;\n    }\n    else if(this.nodes[row][col].isEnd){\n      endIsMoving = true;\n    }\n    else {\n      this.toggleWall(row, col);\n    } \n    console.log('Mouse down');\n  }\n\n  mouseEnter(row: number, column: number){\n    if(mouseIsPressed && !startIsMoving && !endIsMoving){\n      this.toggleWall(row, column);\n    }\n    else if(mouseIsPressed && startIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n        isWall = true;\n      }\n      if(this.nodes[row][column].isEnd){\n        this.setStart(lastPosition.get('Row'), lastPosition.get('Col'));\n      }\n      else{\n\n        this.setStart(row, column);\n      }\n    }\n    else if(mouseIsPressed && endIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n        isWall = true;\n      }\n      if(this.nodes[row][column].isStart){\n        this.setEnd(lastPosition.get('Row'), lastPosition.get('Col'));\n      }\n      else{\n        this.setEnd(row, column);\n      }\n    }\n    else{}\n  }\n\n  mouseLeave(row: number, column: number){\n    if(mouseIsPressed && startIsMoving && this.nodes[row][column].isEnd){\n      this.deleteStart(lastPosition.get('Row'), lastPosition.get('Col'));\n    }\n    else if(mouseIsPressed && startIsMoving){\n      lastPosition.set('Row', row);\n      lastPosition.set('Col', column);\n      this.deleteStart(row, column);   \n    }\n    else if(mouseIsPressed && endIsMoving && this.nodes[row][column].isStart){\n      this.deleteEnd(lastPosition.get('Row'), lastPosition.get('Col'));\n    }\n    else if(mouseIsPressed && endIsMoving){\n      lastPosition.set('Row', row);\n      lastPosition.set('Col', column);\n      this.deleteEnd(row, column);\n    }\n    else {}\n    if(isWall){\n      this.toggleWall(row, column);\n      isWall = false;\n    }\n  }\n\n  mouseUp(row?: number, column?: number){\n    mouseIsPressed = false;\n    startIsMoving = false;\n    endIsMoving = false;\n    console.log('Mouse up');\n  }\n\n  /*\n  #########################################################\n  */\n\n  // deletes all wall nodes of the grid\n  clearWalls(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isWall)\n        this.nodes[i][j].isWall = false;\n      }\n    }\n  }\n\n  // deletes everything of the grid except the start and end node\n  clearBoard(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        this.nodes[i][j].isWall = false;\n        this.nodes[i][j].isVisited = false;\n        this.nodes[i][j].isActuallyVisited = false;\n        this.nodes[i][j].isShortestPath = false;\n      }\n    }\n    this.resetStatistics();\n    const currentStartRow = startCoordiantes.get('Row');\n    const currentStartCol = startCoordiantes.get('Col');\n    const currentEndRow = endCoordinates.get('Row');\n    const currentEndCol = endCoordinates.get('Col');\n    this.deleteStart(currentStartRow, currentStartCol);\n    this.deleteEnd(currentEndRow, currentEndCol);\n    this.setStart(13, 10);\n    this.setEnd(13, 58);\n  }\n\n  // resets the statistics of the options\n  resetStatistics(): void{\n    document.getElementById('visitedNodes').style.color = 'white';\n    document.getElementById('shortestPath').style.color = 'white';\n    document.getElementById('visitedNodes').textContent = '0';\n    document.getElementById('shortestPath').textContent = '0';\n  }\n\n  // deletes every visited node from any previous algorithm\n  clearVisitedNodes(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited || this.nodes[i][j].isVisited || this.nodes[i][j].closed){\n          this.nodes[i][j].isVisited = false;\n          this.nodes[i][j].isActuallyVisited = false;\n          this.nodes[i][j].isShortestPath = false;\n          this.nodes[i][j].closed = false;\n        }\n      }\n    }\n    this.resetStatistics();\n  }\n\n  // helper method to set an selected algorithm\n  setPathfindingAlgorithm(algorithm: string): void{\n    //this.openDijkstraDialog();\n    this.algorithm = algorithm;\n    document.getElementById('btn-visualize').textContent = `Visualize ${this.algorithm}!`;\n    console.log(this.algorithm);\n  }\n\n  // helper method that sets the speed of animation\n  setSpeed(speed: string): void{\n    switch(speed){\n      case \"Very Fast\":\n        animationSpeed = 5;\n        break;\n      case \"Fast\":\n        animationSpeed = 10;\n      case \"Normal\":\n        animationSpeed = 20;\n        break;\n      case \"Slow\":\n        animationSpeed = 40;\n        break;\n      case \"Very Slow\":\n        animationSpeed = 60;\n    }\n  }\n\n  // helper method that sets the initial state of the show-process checkbox\n  initShowProcessCheckbox(): void{\n    const showProcessCheckbox = document.getElementById('showProcess') as HTMLInputElement;\n    showProcess = true;\n    showProcessCheckbox.checked = true;\n\n  }\n\n  // helper method that handles the show-process checkbox\n  setShowProcessCheckbox(): void{\n    const showProcessCheckbox = document.getElementById('showProcess') as HTMLInputElement;\n\n    if(showProcessCheckbox.checked){\n      showProcess = true;\n      console.log(showProcess);\n    }\n    else {\n      showProcess = false;\n      console.log(showProcess);\n    }\n  }\n\n  // sets the statistics in real time \n  setStatistics(visitedNodes: Node[], shortestPath: Node[], showProcess: boolean): void{\n    if(showProcess){\n      for(let i = 0; i <= visitedNodes.length; i++){\n        if(i == visitedNodes.length){\n          setTimeout(() => {\n            for(let j = 0; j < shortestPath.length; j++){\n              setTimeout(() => {\n                document.getElementById('visitedNodes').style.color = '#0398f4';\n                document.getElementById('shortestPath').style.color = 'yellow';\n                document.getElementById('shortestPath').textContent = `${j}`;\n              }, j * animationSpeed*2);\n            }\n          }, i * animationSpeed);\n        }\n        else{\n          setTimeout(() => {\n            document.getElementById('visitedNodes').style.color = '#ff0000';\n            document.getElementById('visitedNodes').textContent = `${i}`;\n          }, i * animationSpeed);\n        }\n      }\n    }\n    else{\n      for(let i = 0; i < shortestPath.length; i++){\n        setTimeout(() => {\n          document.getElementById('shortestPath').style.color = 'yellow';\n          document.getElementById('shortestPath').textContent = `${i}`;\n        }, i * animationSpeed*2);\n      }\n    }\n  }\n\n  // sets the heuristic checkboxes according to some constraints\n  setHeuristicCheckboxes(): void{\n    let euclideanCheckbox = document.getElementById('euclidean') as HTMLInputElement;\n    let manhattanCheckbox = document.getElementById('manhattan') as HTMLInputElement;\n\n    if(distance == 'euclidean'){\n      euclideanCheckbox.checked = true;\n      manhattanCheckbox.checked = false;\n    }\n    else{\n      euclideanCheckbox.checked = false;\n      manhattanCheckbox.checked = true;\n    }\n  }\n\n  // helper method that sets the selected heuristic internally and also calls the setHeuristicCheckboxed()-method\n  setHeuristicDistance(heuristic: string): void{\n    distance = heuristic;\n    this.setHeuristicCheckboxes();\n  }\n\n  // helper method that checks if there are visited nodes in the grid\n  checkVisited(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited && this.nodes[i][j].isShortestPath)\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // same helper method as above but for the A*-algorithm\n  checkClosed(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].closed)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  // checks if the given algorithm found the final node\n  checkIfFound(visitedNodes: Node[]): boolean{\n    if(visitedNodes.length == 0){\n      return false;\n    }\n    else if(visitedNodes[visitedNodes.length-1].isEnd){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n\n  // toggles the side menu at right-hand side of the screen when the viewports width is getting smaller and a burger menu appears\n  toggleSlideMenu():void{\n    const slideMenu = document.querySelector('.slideMenu');\n    const burger = document.querySelector('.burger')\n\n    slideMenu.classList.toggle('slideMenu-active');\n    burger.classList.toggle('toggle');\n    console.log(slideMenu.classList);\n  }\n}\n","<header>\n    <nav>\n        <a href=\"#\" class=\"title\"><span class=\"titleName\">Pathfinder</span></a>\n        <ul class=\"nav-links\">\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms ⮟</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setPathfindingAlgorithm('Dijkstra')\" href=\"#\">Dijkstra</a>\n                        <a (click)=\"setPathfindingAlgorithm('A*')\" href=\"#\">A*</a>\n                        <a (click)=\"setPathfindingAlgorithm('Alt-Dijkstra')\" href=\"#\">Alt-Dijkstra</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Mazes ⮟</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"visualizeMazeAlgorithm()\" href=\"#\">Random Maze</a>\n                        <a href=\"#\">To be continued...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"visualize\"><button id=\"btn-visualize\" (click)=\"checkAlgorithm()\" class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button id=\"btn-clearBoard\" (click)=\"clearBoard()\" class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button id=\"btn-clearWalls\" (click)=\"clearWalls()\" class=\"btn-clearWalls\">Clear Walls</button></li>\n            <li class=\"speed\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Speed of Animation ⮟</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setSpeed('Very Fast')\" href=\"#\">Very Fast</a>\n                        <a (click)=\"setSpeed('Fast')\" href=\"#\">Fast</a>\n                        <a (click)=\"setSpeed('Normal')\" href=\"#\">Normal</a>\n                        <a (click)=\"setSpeed('Slow')\" href=\"#\">Slow</a>\n                        <a (click)=\"setSpeed('Very Slow')\" href=\"#\">Very Slow</a>\n                    </div>\n                </div>\n            </li>\n        </ul>\n        <div class=\"burger\" (click)=\"toggleSlideMenu()\">\n            <div class=\"line1\"></div>\n            <div class=\"line2\"></div>\n            <div class=\"line3\"></div>\n        </div>\n    </nav>\n</header>\n\n<div class=\"slideMenu\">\n    <ul class=\"navLinks\">\n        <li class=\"slideMenuTitle\">Algorithms</li>\n        <li (click)=\"setPathfindingAlgorithm('Dijkstra')\" class=\"item\">Dijkstra</li>\n        <li (click)=\"setPathfindingAlgorithm('A*')\" class=\"item\">A*</li>\n        <li (click)=\"setPathfindingAlgorithm('Alt-Dijkstra')\" class=\"item\">Alt-Dijkstra</li>\n        <li class=\"slideMenuTitle\">Mazes</li>\n        <li (click)=\"visualizeMazeAlgorithm()\" class=\"item\">Random Maze</li>\n        <li class=\"item\">To be continued...</li>\n        <li (click)=\"checkAlgorithm()\" class=\"slideMenuVisualize\">Visualize</li>\n        <li (click)=\"clearBoard()\" class=\"slideMenuClear\">Clear Board</li>\n        <li (click)=\"clearWalls()\" class=\"slideMenuClear\">Clear Walls</li>\n        <li class=\"slideMenuTitle\">Speed of Animation</li>\n        <li (click)=\"setSpeed('Very Fast')\" class=\"item\">Very Fast</li>\n        <li (click)=\"setSpeed('Fast')\" class=\"item\">Fast</li>\n        <li (click)=\"setSpeed('Normal')\" class=\"item\">Normal</li>\n        <li (click)=\"setSpeed('Slow')\" class=\"item\">Slow</li>\n        <li (click)=\"setSpeed('Very Slow')\" class=\"item\">Very Slow</li>\n    </ul>\n</div>\n\n<div class=\"options\">\n<table class=\"options-container\">\n    <tr>\n        <th>General</th>\n        <th>Heuristics</th>\n        <th class=\"stats\">Statistics</th>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"showProcess\" type=\"checkbox\" (click)=\"setShowProcessCheckbox()\"><label class=\"checkboxLabel\" for=\"checkbox\">Show Process</label>\n        </td>\n        <td>\n            <input id=\"euclidean\" type=\"checkbox\" (click)=\"setHeuristicDistance('euclidean')\"><label class=\"checkboxLabel\" for=\"checkbox\">Euclidean</label>\n        </td>\n        <td>\n            <p id=\"visitedNodesStats\">Visited Nodes: <label id=\"visitedNodes\">0</label></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"bidirectional\" type=\"checkbox\"><label class=\"checkboxLabel\" for=\"checkbox\">Bidirectional</label>\n        </td>\n        <td>\n            <input id=\"manhattan\" type=\"checkbox\" (click)=\"setHeuristicDistance('manhattan')\"><label class=\"checkboxLabel\" for=\"checkbox\">Manhattan</label>\n        </td>\n        <td>\n            <p id=\"shortestPathStats\">Shortest path: <label id=\"shortestPath\">0</label></p>\n        </td>\n    </tr>\n</table>\n</div>\n\n<div class=\"grid-container\">\n    <table class=\"grid\">\n        <tr *ngFor=\"let rows of nodes; index as row;\">\n            <td *ngFor=\"let node of rows; index as col;\"\n            draggable=\"false\"\n            (mousedown)=\"mouseDown(row, col)\"\n            (mouseenter)=\"mouseEnter(row, col)\"\n            (mouseleave)=\"mouseLeave(row, col)\"\n            (mouseup)=\"mouseUp(row, col)\">\n                <div [ngClass]=\"{\n                    'isStart': node.isStart,\n                    'isEnd': node.isEnd,\n                    'isWall': node.isWall,\n                    'isVisited': node.isActuallyVisited,\n                    'isShortestPath': node.isShortestPath,\n                    'node': true\n                    }\" id=\"node.id\">\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>","import { Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"navbar-container\">\n    <span class=\"title\">Pathfinding Visualizer</span>\n    <nav class=\"navmenu-brand\">\n        <ul>\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">Dijkstra</a>\n                        <a href=\"#\">A*</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Maze & Patterns</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">...</a>\n                        <a href=\"#\">...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"addBomb\"><button class=\"btn-addBomb\">Add Bomb</button></li>\n            <li class=\"visualize\"><button class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button class=\"btn-clearWalls\">Clear Walls</button></li>\n        </ul>\n    </nav>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { GridComponent } from 'src/app/grid/grid.component';\r\n\r\nexport class Node{\r\n    id: number;\r\n    isStart: boolean;\r\n    isEnd: boolean;\r\n    isWall: boolean;\r\n    isVisited: boolean;\r\n    isDiagonal: boolean;\r\n    distance: number;\r\n    //###########\r\n    // for astar algo\r\n    f: number;\r\n    g: number;\r\n    h: number;\r\n    closed: boolean;\r\n    //############\r\n    row: number;\r\n    column: number;\r\n    parentNode: Node;\r\n    isShortestPath: boolean;\r\n    isActuallyVisited: boolean;\r\n\r\n    constructor(id: number, isStart: boolean, isEnd: boolean, isWall: boolean, isVisited: boolean, row: number, column: number){\r\n        this.id = id;\r\n        this.isStart = isStart;\r\n        this.isEnd = isEnd;\r\n        this.isWall = isWall;\r\n        this.isVisited = isVisited;\r\n        this.row = row;\r\n        this.column = column;\r\n        this.parentNode = null;\r\n        this.isShortestPath = false;\r\n        this.isActuallyVisited = false;\r\n        this.closed = false;\r\n        this.isDiagonal = false;\r\n    }\r\n}"]}