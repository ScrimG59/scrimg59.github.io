{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/algorithms/maze/randomMaze.ts","webpack:///src/app/algorithms/pathfinding/astar.ts","webpack:///src/app/algorithms/pathfinding/dijkstra.ts","webpack:///src/app/algorithms/pathfinding/dijkstraexperimental.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/grid/grid.component.ts","webpack:///src/app/grid/grid.component.html","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///src/models/node.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","generateRandomMaze","grid","wallNodes","i","length","j","random","Math","floor","currentNode","isStart","isEnd","push","aStar","startNode","endNode","heuristic","openList","closedList","f","g","h","parentNode","indexOfLowestF","console","log","splice","closed","neighbors","getNeighbors","neighbor","includes","isWall","gScore","isBestG","row","column","getHeuristicDistance","index","result","sqrt","pow","abs","retraceShortestPath","shortestPath","unshift","executeDijkstra","diagonal","visitedNodes","unvisitedNodes","distance","Infinity","getAll","sort","a","b","shift","isVisited","updateUnvisitedNeighbors","getUnvisitedNeighbors","filter","unvisitedNeighbors","forEach","node","isDiagonal","nodes","createShortestPath","executeExperimental","routes","AppRoutingModule","forRoot","imports","AppComponent","titleService","title","setTitle","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","GRID_NODES","ALGORITHM","bidirectional","animationSpeed","mouseIsPressed","startIsMoving","endIsMoving","isRunning","startCoordiantes","Map","endCoordinates","GridComponent","exampleArray","algorithm","generateTwoDimensionalGrid","set","setHeuristicCheckboxes","setDiagonalCheckbox","currentRow","document","getElementById","textContent","style","backgroundColor","checkVisited","checkClosed","clearVisitedNodes","visualizeAlgorithm","startRow","get","startCol","endRow","endCol","checkIfFound","setTimeout","animateAlgorithm","setStatistics","animateShortestPath","isActuallyVisited","isShortestPath","clearBoard","walls","animateMazeAlgorithm","col","toggleWall","setStart","setEnd","deleteStart","deleteEnd","resetStatistics","color","speed","diagonalCheckbox","checked","euclideanCheckbox","manhattanCheckbox","setPathfindingAlgorithm","visualizeMazeAlgorithm","checkAlgorithm","clearWalls","setSpeed","setHeuristicDistance","NavbarComponent","environment","production","bootstrapModule","err","error","Node"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Node } from '../../../models/node';\r\n\r\nexport function generateRandomMaze(grid: Node[][]): Node[]{\r\n\r\n    const wallNodes = [];\r\n\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            // returns a random int value from 0 to 1\r\n            const random = Math.floor(Math.random() * 3.5);\r\n            const currentNode = grid[i][j];\r\n            if(random == 1 && !currentNode.isStart && !currentNode.isEnd)\r\n                wallNodes.push(currentNode); \r\n        }\r\n    }\r\n    return wallNodes;\r\n}","import { Node } from '../../../models/node';\r\n\r\nexport function aStar(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n    // intialize\r\n    let openList = [];\r\n    let closedList = [];\r\n    for(let i = 0; i < grid.length; i++){\r\n        for(let j = 0; j < grid[i].length; j++){\r\n            grid[i][j].f = 0;\r\n            grid[i][j].g = 0;\r\n            grid[i][j].h = 0;\r\n            grid[i][j].parentNode = null;\r\n        }\r\n    }\r\n    openList.push(startNode);\r\n    while(openList.length != 0){\r\n        let indexOfLowestF = 0;\r\n        for(let i = 0; i < openList.length; i++){\r\n            if(openList[i].f < openList[indexOfLowestF].f){\r\n                indexOfLowestF = i;\r\n            }\r\n        }\r\n        const currentNode = openList[indexOfLowestF];\r\n\r\n        // we found the end node\r\n        if(currentNode.isEnd){\r\n            console.log('Found end node!');\r\n            closedList.push(currentNode);\r\n            return closedList;\r\n        }\r\n\r\n        // remove the node with lowest f value from the openList\r\n        openList.splice(indexOfLowestF, 1);\r\n        // and push it into the closedList\r\n        currentNode.closed = true;\r\n        closedList.push(currentNode);\r\n        // get the 4 neighbors of the current node\r\n        const neighbors = getNeighbors(grid, currentNode);\r\n\r\n        for(let i = 0; i < neighbors.length; i++){\r\n            const neighbor = neighbors[i];\r\n            // if the neighbor already is in the closedList or it is a wall, just skip it\r\n            if(closedList.includes(neighbor) || neighbor.isWall){\r\n                console.log(`Neighbor ${neighbor.id} already in the closedList!`);\r\n                continue;\r\n            }\r\n            \r\n            // the gScore is just the distance from the start node to the current node \r\n            let gScore = currentNode.g + 1;\r\n            // this boolean value is helping us to differentiate if it's the most optimal path to the current node\r\n            let isBestG = false;\r\n\r\n            // first time visiting the node\r\n            if(!openList.includes(neighbor)){\r\n                console.log(`First time visiting Node ${neighbor.row} ${neighbor.column}`);\r\n                // if it's the first time visiting the node, the gscore is the best (at least for the moment)\r\n                isBestG = true;\r\n                // get the heuristic distance \r\n                neighbor.h = getHeuristicDistance(neighbor, endNode, heuristic);\r\n                // add the current neighbor to the openList\r\n                openList.push(neighbor);\r\n            }\r\n\r\n            // if it's not the first time visiting the node but the g score was worse on the previous time\r\n            else if(gScore < neighbor.g){\r\n                isBestG = true;\r\n            }\r\n\r\n            // if we found the temporal best path to this node\r\n            if(isBestG){\r\n                console.log(`Best path to node ${neighbor.row} ${neighbor.column}`);\r\n                neighbor.parentNode = currentNode;\r\n                neighbor.g = gScore;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                console.log(`F: ${neighbor.f} G: ${neighbor.g} H: ${neighbor.h}`);\r\n            }\r\n        }\r\n    }\r\n    // return empty array if there was an error\r\n    return [];\r\n}\r\n\r\nfunction getNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n    const neighbors = [];\r\n    // get the column and row from the current node\r\n    console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n    const column = currentNode.column;\r\n    const row = currentNode.row;\r\n    // get the node above\r\n    if(row > 0){\r\n        var index = \r\n        neighbors.push(grid[row - 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node below\r\n    if(row < 26){\r\n        neighbors.push(grid[row + 1][column]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the left\r\n    if(column > 0){\r\n        neighbors.push(grid[row][column - 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    // get the node on the right\r\n    if(column < 68){\r\n        neighbors.push(grid[row][column + 1]);\r\n        console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n    }\r\n    \r\n    // only return the neighbors that weren't visited yet\r\n    return neighbors;\r\n}\r\n\r\nfunction getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n    if(heuristic == 'euclidean'){\r\n        const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n        console.log('Euclidean Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n    else{\r\n        const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n        console.log('Manhattan Distance as heuristic');\r\n        console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function retraceShortestPath(endNode: Node){\r\n    const shortestPath = [];\r\n    // set the current node to the end node\r\n    var currentNode = endNode;\r\n    // backtrack from the end node all the way to the starting node\r\n    while(currentNode.parentNode != null){\r\n        // add the current node to the array of nodes for the shortest path\r\n        shortestPath.unshift(currentNode);\r\n        // then set current node to the current node's previous node ==> Backtracking\r\n        \r\n        currentNode = currentNode.parentNode;\r\n    }\r\n    console.log('[A*] LENGTH: ' + shortestPath.length);\r\n    return shortestPath;\r\n}","import {Node} from '../../../models/node';\r\n\r\n    export function executeDijkstra(grid: Node[][], startNode: Node, endNode: Node, diagonal: boolean){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                }\r\n                else{\r\n                    // setting every node's distance to infinity except the start node\r\n                    grid[i][j].distance = Infinity;\r\n                }\r\n                // setting the parent (previous) node to null\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        // getting all nodes from the current grid\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        // go through every unvisited node until the final node is reached\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            // update the unvisited neighbors\r\n            updateUnvisitedNeighbors(grid, currentNode, diagonal);\r\n        }\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    // UNDER CONSTRUCTION\r\n    /*export function getUnvisitedDiagonalNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[DIJKSTRA]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        let currentNeighbor = null; \r\n        // get the node above\r\n        if(row > 0){\r\n            currentNeighbor = grid[row - 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right above\r\n        if(row > 0 && column < 68){\r\n            currentNeighbor = grid[row - 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            currentNeighbor = grid[row][column + 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally right below\r\n        if(row < 26 && column < 68){\r\n            currentNeighbor = grid[row + 1][column + 1];\r\n            currentNeighbor.isDiagonal = true; \r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            currentNeighbor = grid[row + 1][column];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left below\r\n        if(row < 26 && column > 0){\r\n            currentNeighbor = grid[row + 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            currentNeighbor = grid[row][column - 1];\r\n            neighbors.push(currentNeighbor);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node diagonally left above\r\n        if(row > 0 && column > 0){\r\n            currentNeighbor = grid[row - 1][column - 1];\r\n            currentNeighbor.isDiagonal = true;\r\n            neighbors.push(currentNeighbor);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }*/\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node, diagonal: boolean): void{\r\n        // get all unvisited neighbors of the current node\r\n        let unvisitedNeighbors;\r\n        if(diagonal){\r\n            //unvisitedNeighbors = getUnvisitedDiagonalNeighbors(grid, currentNode);\r\n        }\r\n        else {\r\n            unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            if(node.isDiagonal){\r\n                node.distance = currentNode.distance + 1.1;\r\n            }\r\n            else{\r\n                // \"1\" is the standard weight (distance) from one node to its neighbors\r\n                node.distance = currentNode.distance + 1;\r\n            }\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        return shortestPath;\r\n    }","import {Node} from '../../../models/node';\r\n\r\n    export function executeExperimental(grid: Node[][], startNode: Node, endNode: Node, heuristic: string){\r\n        let visitedNodes = [];\r\n        let unvisitedNodes = [];\r\n        // initialize \r\n        for(let i: number = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                if(grid[i][j].isStart){\r\n                    grid[i][j].distance = 0;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                else{\r\n                    grid[i][j].distance = Infinity;\r\n                    grid[i][j].h = getHeuristicDistance(grid[i][j], endNode, heuristic);\r\n                }\r\n                grid[i][j].parentNode = null;\r\n            }\r\n        }\r\n        unvisitedNodes = getAll(grid);\r\n        console.log('unvisited nodes length: ' + unvisitedNodes.length);\r\n        while(unvisitedNodes.length != 0){\r\n            // get an array of unvisited nodes sorted according to the shortest distance\r\n            unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n            // currentNode is the node with shortest distance\r\n            const currentNode = unvisitedNodes.shift();\r\n            // skip the walls\r\n            if(currentNode.isWall){\r\n                console.log('Its a wall');\r\n                continue;\r\n            }\r\n            // if distance is infinite, we are probably trapped in walls\r\n            if(currentNode.distance == Infinity){\r\n                console.log('WE GOT A PROBLEM!');\r\n                return visitedNodes;\r\n            }\r\n            // set the current node's \"isVisited\"-property to true\r\n            if(!currentNode.isStart && !currentNode.isEnd){\r\n                currentNode.isVisited = true;\r\n            }\r\n            visitedNodes.push(currentNode);\r\n            // push the current node into an array of already visited nodes\r\n            if(currentNode.isEnd){\r\n                console.log('End node reached!!');\r\n                return visitedNodes;\r\n            }\r\n            console.log('updating neighbors')\r\n            updateUnvisitedNeighbors(grid, currentNode);\r\n        }\r\n    }\r\n\r\n    export function getAll(grid: Node[][]): Node[]{\r\n        const nodes = [];\r\n        // gets all nodes of the given grid\r\n        for(let i = 0; i < grid.length; i++){\r\n            for(let j = 0; j < grid[i].length; j++){\r\n                nodes.push(grid[i][j]);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    function getHeuristicDistance(currentNode: Node, endNode: Node, heuristic: string): number{\r\n        if(heuristic == 'euclidean'){\r\n            const result = Math.sqrt(Math.pow((currentNode.row - endNode.row), 2) + Math.pow((currentNode.column - endNode.column), 2));\r\n            console.log('Euclidean Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n        else{\r\n            const result = Math.abs(currentNode.row - endNode.row) + Math.abs(currentNode.column - endNode.column);\r\n            console.log('Manhattan Distance as heuristic');\r\n            console.log(`CurrentNode: ${currentNode.row} ${currentNode.column}, EndNode: ${endNode.row} ${endNode.column}, HeuristicDistance: ${result}`);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function updateUnvisitedNeighbors(grid: Node[][], currentNode: Node): void{\r\n        // get all unvisited neighbors of the current node\r\n        const unvisitedNeighbors = getUnvisitedNeighbors(grid, currentNode);\r\n        // for each unvisited neighbor set the distance to the current node's distance + 1\r\n        // +1 because the distance between the current node and the neighbor is 1\r\n        // also set the neighbors \"previousNode\"-property to the current node\r\n        unvisitedNeighbors.forEach(node => {\r\n            node.distance = currentNode.distance + node.h + 1;\r\n            node.parentNode = currentNode;\r\n        });\r\n    }\r\n\r\n    export function getUnvisitedNeighbors(grid: Node[][], currentNode: Node): Node[]{\r\n        const neighbors = [];\r\n        // get the column and row from the current node\r\n        console.log('[A*]: CurrentNode: ' + currentNode.row + ' ' + currentNode.column);\r\n        const column = currentNode.column;\r\n        const row = currentNode.row;\r\n        // get the node above\r\n        if(row > 0){\r\n            var index = \r\n            neighbors.push(grid[row - 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node below\r\n        if(row < 26){\r\n            neighbors.push(grid[row + 1][column]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the left\r\n        if(column > 0){\r\n            neighbors.push(grid[row][column - 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // get the node on the right\r\n        if(column < 68){\r\n            neighbors.push(grid[row][column + 1]);\r\n            console.log('Neighbor: ' + neighbors[neighbors.length-1].row + ' ' + neighbors[neighbors.length-1].column + ' INDEX: ' + neighbors[neighbors.length-1].id);\r\n        }\r\n        // only return the neighbors that weren't visited yet\r\n        return neighbors.filter(neighbor => !neighbor.isVisited);\r\n    }\r\n\r\n    export function createShortestPath(endNode: Node): Node[]{\r\n        const shortestPath = [];\r\n        // set the current node to the end node\r\n        var currentNode = endNode;\r\n        // backtrack from the end node all the way to the starting node\r\n        while(currentNode != null){\r\n            // add the current node to the array of nodes for the shortest path\r\n            shortestPath.unshift(currentNode);\r\n            // then set current node to the current node's previous node ==> Backtracking\r\n            if(currentNode.parentNode.isStart){break;}\r\n            currentNode = currentNode.parentNode;\r\n        }\r\n        console.log('[DIJKSTRA] LENGTH: ' + shortestPath.length);\r\n        return shortestPath;\r\n    }","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Pathfinder';\n  constructor(private titleService: Title){\n    this.titleService.setTitle('Pathfinder');\n  }\n}\n","<html>\n  <body>\n    <app-grid></app-grid>\n  </body>\n</html>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule} from '@angular/material/button';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { GridComponent } from './grid/grid.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    GridComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport {Node} from '../../models/node';\nimport {executeDijkstra, createShortestPath} from '../algorithms/pathfinding/dijkstra';\nimport { aStar, retraceShortestPath } from '../algorithms/pathfinding/astar';\nimport { executeExperimental } from '../algorithms/pathfinding/dijkstraexperimental';\nimport { generateRandomMaze } from '../algorithms/maze/randomMaze';\n\n\nconst GRID_NODES = [];\nlet ALGORITHM = \"nothing\";\nlet distance = 'euclidean';\nlet diagonal = false;\nlet bidirectional = false;\nlet animationSpeed = 20;\nlet mouseIsPressed = false;\nlet startIsMoving = false;\nlet endIsMoving = false;\nlet isRunning = false;\nlet startCoordiantes = new Map();\nlet endCoordinates = new Map();\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.css']\n})\n\nexport class GridComponent implements OnInit {\n\n  exampleArray = [];\n  \n  constructor() {}\n\n  nodes = GRID_NODES;\n  algorithm = ALGORITHM;\n\n  ngOnInit(): void {\n    //generates the nodes for the grid\n    this.generateTwoDimensionalGrid();\n    // setting the default coordinates for start node and end node\n    startCoordiantes.set('Row', 13);\n    startCoordiantes.set('Col', 10);\n    endCoordinates.set('Row', 13);\n    endCoordinates.set('Col', 58);\n    // setting the default checkboxes\n    this.setHeuristicCheckboxes();\n    this.setDiagonalCheckbox();\n  }\n\n  generateTwoDimensionalGrid(): void{\n    let index: number = 0;\n    for(let row: number = 0; row <= 26; row++){\n      const currentRow = [];\n      for(let column: number = 0; column < 69; column++){\n        if(row == 13 && column == 10){\n          currentRow.push(new Node(index, true, false, false, false, row, column));\n        }\n        else if(row == 13 && column == 58){\n          currentRow.push(new Node(index, false, true, false, false, row, column));\n        }\n        else{\n          currentRow.push(new Node(index, false, false,  false, false, row, column));\n        }\n        index++;\n      }\n      GRID_NODES.push(currentRow);\n    }\n  }\n\n  checkAlgorithm(): void{\n    if(isRunning) return;\n    if(this.algorithm == 'nothing'){\n      document.getElementById('btn-visualize').textContent = \"Pick an algortihm!\"\n    }\n    else{\n      document.getElementById('btn-visualize').textContent = 'Visualizing...';\n      document.getElementById('btn-visualize').style.backgroundColor = '#ff0000';\n      if(this.checkVisited() || this.checkClosed()){\n        this.clearVisitedNodes();\n      }\n      isRunning = true;\n      this.visualizeAlgorithm();\n    }\n  }\n\n  visualizeAlgorithm(): void{\n    if(this.algorithm == 'Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeDijkstra(this.nodes, startNode, endNode, diagonal);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath);\n        this.setStatistics(visitedNodes, shortestPath);\n      }\n    }\n    else if(this.algorithm == 'A*'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = aStar(this.nodes, startNode, endNode, distance);\n      console.log('VISITED NODES:' + visitedNodes.length);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else{\n        const shortestPath = retraceShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath);\n        this.setStatistics(visitedNodes, shortestPath);\n      }\n    }\n    else if(this.algorithm == 'Alt-Dijkstra'){\n      const startRow = startCoordiantes.get('Row');\n      const startCol = startCoordiantes.get('Col');\n      const startNode = this.nodes[startRow][startCol];\n      const endRow = endCoordinates.get('Row');\n      const endCol = endCoordinates.get('Col');\n      const endNode = this.nodes[endRow][endCol];\n      const visitedNodes = executeExperimental(this.nodes, startNode, endNode, distance);\n      if(!this.checkIfFound(visitedNodes)){\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!';\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'No path found!';\n        this.algorithm = 'nothing';\n        isRunning = false;\n        return;\n      }\n      else {\n        const shortestPath = createShortestPath(endNode);\n        this.animateAlgorithm(visitedNodes, shortestPath);\n        this.setStatistics(visitedNodes, shortestPath);\n      }\n    }\n  }\n\n  animateAlgorithm(visitedNodes: Node[], shortestPath: Node[]){\n    for(let i = 0; i <= visitedNodes.length; i++){\n      if(i == visitedNodes.length){\n        setTimeout(() => {\n          console.log('[GRID] Shortest Path: ' + shortestPath.length);\n          console.log('[GRID]: ' + shortestPath[0].row + ' ' + shortestPath[0].column);\n          this.animateShortestPath(shortestPath);\n        }, i * animationSpeed);\n        return;\n      }\n      setTimeout(() => {\n        if(visitedNodes[i].isStart || visitedNodes[i].isEnd){}\n        else{\n          visitedNodes[i].isActuallyVisited = true;\n        }\n      }, i * animationSpeed);\n    }\n  }\n\n  animateShortestPath(shortestPath: Node[]){\n    for(let i = 0; i <= shortestPath.length; i++){\n      setTimeout(() => {\n        if(i == shortestPath.length){\n          this.algorithm = 'nothing';\n          isRunning = false;\n          document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n          setTimeout(() => {\n            document.getElementById('btn-visualize').textContent = 'Visualize!'\n          }, 1500);\n          document.getElementById('btn-visualize').textContent = 'Done!'\n          return;\n        }\n        console.log('[ANIMATE_SHORTEST_PATH]: ' + shortestPath[i].row + ' ' + shortestPath[i].column);\n        shortestPath[i].isActuallyVisited = false;\n        if(shortestPath[i].isEnd){}\n        else {shortestPath[i].isShortestPath = true;}\n      }, i * animationSpeed*2);\n    }\n  }\n\n  visualizeMazeAlgorithm(){\n    if(isRunning) return;\n    console.log(\"Generating random maze...\");\n    this.clearBoard();\n    isRunning = true;\n    const walls = generateRandomMaze(this.nodes);\n    this.animateMazeAlgorithm(walls);\n  }\n\n  animateMazeAlgorithm(walls: Node[]){\n    console.log(\"Animating random maze...\");\n    for(let i = 0; i <= walls.length; i++){\n      setTimeout(() => {\n      if(i == walls.length){\n        isRunning = false;\n        document.getElementById('btn-visualize').style.backgroundColor = '#0398f4';\n        setTimeout(() => {\n          document.getElementById('btn-visualize').textContent = 'Visualize!'\n        }, 1500);\n        document.getElementById('btn-visualize').textContent = 'Done!'\n        return;\n      }\n        walls[i].isWall = true;\n      }, i * 10);\n    }\n  }\n\n  toggleWall(row: number, column: number){\n    if((this.nodes[row][column].isStart || this.nodes[row][column].isEnd)){\n      console.log('Cannot toggle wall!');\n      return;\n    }\n    else if(isRunning){}\n    else{\n        this.nodes[row][column].isWall = !this.nodes[row][column].isWall;\n    }\n    console.log('ROW: ' + this.nodes[row][column].row + ' COLUMN: ' + this.nodes[row][column].column);\n  }\n\n  setStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = true;\n    startCoordiantes.set('Row', row);\n    startCoordiantes.set('Col', column);\n  }\n\n  deleteStart(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isStart = false;\n  }\n\n  setEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = true;\n    endCoordinates.set('Row', row);\n    endCoordinates.set('Col', column);\n  }\n\n  deleteEnd(row: number, column: number){\n    if(isRunning){return;}\n    this.nodes[row][column].isEnd = false;\n  }\n\n  mouseDown(row: number, col: number){\n    mouseIsPressed = true;\n    if(this.nodes[row][col].isStart){\n      startIsMoving = true;\n    }\n    else if(this.nodes[row][col].isEnd){\n      endIsMoving = true;\n    }\n    else {\n      this.toggleWall(row, col);\n    } \n    console.log('Mouse down');\n  }\n\n  mouseEnter(row: number, column: number){\n    if(mouseIsPressed && !startIsMoving && !endIsMoving){\n      this.toggleWall(row, column);\n    }\n    else if(mouseIsPressed && startIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n      }\n      this.setStart(row, column);\n    }\n    else if(mouseIsPressed && endIsMoving){\n      if(this.nodes[row][column].isWall){\n        this.toggleWall(row, column);\n      }\n      this.setEnd(row, column);\n    }\n    else{}\n  }\n\n  mouseLeave(row: number, column: number){\n    if(mouseIsPressed && startIsMoving){\n      this.deleteStart(row, column);   \n    }\n    else if(mouseIsPressed && endIsMoving){\n      this.deleteEnd(row, column);\n    }\n    else {}\n  }\n\n  mouseUp(row?: number, column?: number){\n    mouseIsPressed = false;\n    startIsMoving = false;\n    endIsMoving = false;\n    console.log('Mouse up');\n  }\n\n  clearWalls(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isWall)\n        this.nodes[i][j].isWall = false;\n      }\n    }\n  }\n\n  clearBoard(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        this.nodes[i][j].isWall = false;\n        this.nodes[i][j].isVisited = false;\n        this.nodes[i][j].isActuallyVisited = false;\n        this.nodes[i][j].isShortestPath = false;\n      }\n    }\n    this.resetStatistics();\n  }\n\n  resetStatistics(): void{\n    document.getElementById('visitedNodes').style.color = 'white';\n    document.getElementById('shortestPath').style.color = 'white';\n    document.getElementById('visitedNodes').textContent = '0';\n    document.getElementById('shortestPath').textContent = '0';\n  }\n\n  clearVisitedNodes(): void{\n    if(isRunning)\n      return;\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited || this.nodes[i][j].isVisited || this.nodes[i][j].closed){\n          this.nodes[i][j].isVisited = false;\n          this.nodes[i][j].isActuallyVisited = false;\n          this.nodes[i][j].isShortestPath = false;\n          this.nodes[i][j].closed = false;\n        }\n      }\n    }\n    this.resetStatistics();\n  }\n\n  setPathfindingAlgorithm(algorithm: string): void{\n    //this.openDijkstraDialog();\n    this.algorithm = algorithm;\n    document.getElementById('btn-visualize').textContent = `Visualize ${this.algorithm}!`;\n    console.log(this.algorithm);\n  }\n\n  setSpeed(speed: string): void{\n    switch(speed){\n      case \"Very Fast\":\n        animationSpeed = 5;\n        break;\n      case \"Fast\":\n        animationSpeed = 10;\n      case \"Normal\":\n        animationSpeed = 20;\n        break;\n      case \"Slow\":\n        animationSpeed = 40;\n        break;\n      case \"Very Slow\":\n        animationSpeed = 60;\n    }\n  }\n\n  setDiagonalCheckbox(): void{\n    let diagonalCheckbox = document.getElementById('diagonal') as HTMLInputElement;\n\n    if(diagonalCheckbox.checked){\n      diagonal = true;\n    }\n    else {\n      diagonal = false;\n    }\n  }\n\n  setStatistics(visitedNodes: Node[], shortestPath: Node[]): void{\n    for(let i = 0; i <= visitedNodes.length; i++){\n      if(i == visitedNodes.length){\n        setTimeout(() => {\n          for(let j = 0; j < shortestPath.length; j++){\n            setTimeout(() => {\n              document.getElementById('visitedNodes').style.color = '#0398f4';\n              document.getElementById('shortestPath').style.color = 'yellow';\n              document.getElementById('shortestPath').textContent = `${j}`;\n            }, j * animationSpeed*2);\n          }\n        }, i * animationSpeed);\n      }\n      else{\n        setTimeout(() => {\n          document.getElementById('visitedNodes').style.color = '#ff0000';\n          document.getElementById('visitedNodes').textContent = `${i}`;\n        }, i * animationSpeed);\n      }\n    }\n  }\n\n  setHeuristicCheckboxes(): void{\n    let euclideanCheckbox = document.getElementById('euclidean') as HTMLInputElement;\n    let manhattanCheckbox = document.getElementById('manhattan') as HTMLInputElement;\n\n    if(distance == 'euclidean'){\n      euclideanCheckbox.checked = true;\n      manhattanCheckbox.checked = false;\n    }\n    else{\n      euclideanCheckbox.checked = false;\n      manhattanCheckbox.checked = true;\n    }\n  }\n\n  setHeuristicDistance(heuristic: string): void{\n    distance = heuristic;\n    this.setHeuristicCheckboxes();\n  }\n\n  checkVisited(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].isActuallyVisited)\n        return true;\n      }\n    }\n    return false;\n  }\n\n  checkClosed(): boolean{\n    for(let i = 0; i < this.nodes.length; i++){\n      for(let j = 0; j < this.nodes[i].length; j++){\n        if(this.nodes[i][j].closed)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  checkIfFound(visitedNodes: Node[]): boolean{\n    if(visitedNodes.length == 0){\n      return false;\n    }\n    else if(visitedNodes[visitedNodes.length-1].isEnd){\n      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n","<header>\n<div class=\"navbar-container\">\n    <a href=\"#\" class=\"title\">Pathfinder</a>\n    <nav>\n        <ul>\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setPathfindingAlgorithm('Dijkstra')\" href=\"#\">Dijkstra</a>\n                        <a (click)=\"setPathfindingAlgorithm('A*')\" href=\"#\">A*</a>\n                        <a (click)=\"setPathfindingAlgorithm('Alt-Dijkstra')\" href=\"#\">Alt-Dijkstra</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Mazes</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"visualizeMazeAlgorithm()\" href=\"#\">Random Maze</a>\n                        <a href=\"#\">To be continued...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"visualize\"><button id=\"btn-visualize\" (click)=\"checkAlgorithm()\" class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button id=\"btn-clearBoard\" (click)=\"clearBoard()\" class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button id=\"btn-clearWalls\" (click)=\"clearWalls()\" class=\"btn-clearWalls\">Clear Walls</button></li>\n            <li class=\"speed\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Speed of Animation</button>\n                    <div class=\"dropdown-content\">\n                        <a (click)=\"setSpeed('Very Fast')\" href=\"#\">Very Fast</a>\n                        <a (click)=\"setSpeed('Fast')\" href=\"#\">Fast</a>\n                        <a (click)=\"setSpeed('Normal')\" href=\"#\">Normal</a>\n                        <a (click)=\"setSpeed('Slow')\" href=\"#\">Slow</a>\n                        <a (click)=\"setSpeed('Very Slow')\" href=\"#\">Very Slow</a>\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </nav>\n</div>\n</header>\n\n<div class=\"options\">\n<table class=\"options-container\">\n    <tr>\n        <th>General</th>\n        <th>Heuristics</th>\n        <th class=\"stats\">Statistics</th>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"diagonal\" type=\"checkbox\" (click)=\"setDiagonalCheckbox()\"><label class=\"diagonalLabel\" for=\"checkbox\">Diagonal</label>\n        </td>\n        <td>\n            <input id=\"euclidean\" type=\"checkbox\" (click)=\"setHeuristicDistance('euclidean')\"><label class=\"diagonalLabel\" for=\"checkbox\">Euclidean</label>\n        </td>\n        <td>\n            <p id=\"visitedNodesStats\">Visited Nodes: <label id=\"visitedNodes\">0</label></p>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            <input id=\"bidirectional\" type=\"checkbox\"><label class=\"diagonalLabel\" for=\"checkbox\">Bidirectional</label>\n        </td>\n        <td>\n            <input id=\"manhattan\" type=\"checkbox\" (click)=\"setHeuristicDistance('manhattan')\"><label class=\"diagonalLabel\" for=\"checkbox\">Manhattan</label>\n        </td>\n        <td>\n            <p id=\"shortestPathStats\">Shortest path: <label id=\"shortestPath\">0</label></p>\n        </td>\n    </tr>\n</table>\n</div>\n\n<div class=\"grid-container\">\n    <table class=\"grid\">\n        <tr *ngFor=\"let rows of nodes; index as row;\">\n            <td *ngFor=\"let node of rows; index as col;\"\n            draggable=\"false\"\n            (mousedown)=\"mouseDown(row, col)\"\n            (mouseenter)=\"mouseEnter(row, col)\"\n            (mouseleave)=\"mouseLeave(row, col)\"\n            (mouseup)=\"mouseUp(row, col)\">\n                <div [ngClass]=\"{\n                    'isStart': node.isStart,\n                    'isEnd': node.isEnd,\n                    'isWall': node.isWall,\n                    'isVisited': node.isActuallyVisited,\n                    'isShortestPath': node.isShortestPath,\n                    'node': true\n                    }\" id=\"node.id\">\n                </div>\n            </td>\n        </tr>\n    </table>\n</div>","import { Component, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"navbar-container\">\n    <span class=\"title\">Pathfinding Visualizer</span>\n    <nav class=\"navmenu-brand\">\n        <ul>\n            <li class=\"algorithms\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Algorithms</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">Dijkstra</a>\n                        <a href=\"#\">A*</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"maze\">\n                <div class= dropdown>\n                    <button class=\"dropbtn\">Maze & Patterns</button>\n                    <div class=\"dropdown-content\">\n                        <a href=\"#\">...</a>\n                        <a href=\"#\">...</a>\n                    </div>\n                </div>\n            </li>\n            <li class=\"addBomb\"><button class=\"btn-addBomb\">Add Bomb</button></li>\n            <li class=\"visualize\"><button class=\"btn-visualize\">Visualize!</button></li>\n            <li class=\"clearBoard\"><button class=\"btn-clearBoard\">Clear Board</button></li>\n            <li class=\"clearWalls\"><button class=\"btn-clearWalls\">Clear Walls</button></li>\n        </ul>\n    </nav>\n</div>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { GridComponent } from 'src/app/grid/grid.component';\r\n\r\nexport class Node{\r\n    id: number;\r\n    isStart: boolean;\r\n    isEnd: boolean;\r\n    isWall: boolean;\r\n    isVisited: boolean;\r\n    isDiagonal: boolean;\r\n    distance: number;\r\n    //###########\r\n    // for astar algo\r\n    f: number;\r\n    g: number;\r\n    h: number;\r\n    closed: boolean;\r\n    //############\r\n    row: number;\r\n    column: number;\r\n    parentNode: Node;\r\n    isShortestPath: boolean;\r\n    isActuallyVisited: boolean;\r\n\r\n    constructor(id: number, isStart: boolean, isEnd: boolean, isWall: boolean, isVisited: boolean, row: number, column: number){\r\n        this.id = id;\r\n        this.isStart = isStart;\r\n        this.isEnd = isEnd;\r\n        this.isWall = isWall;\r\n        this.isVisited = isVisited;\r\n        this.row = row;\r\n        this.column = column;\r\n        this.parentNode = null;\r\n        this.isShortestPath = false;\r\n        this.isActuallyVisited = false;\r\n        this.closed = false;\r\n        this.isDiagonal = false;\r\n    }\r\n}"]}